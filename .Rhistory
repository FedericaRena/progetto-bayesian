# scale_color_identity(guide="legend",labels=paste0("cl",1:max(clust_vals)),
# breaks=cols[1:max(clust_vals)])+
scale_color_identity(guide="legend",labels=paste0("cl",n_clusters),
breaks=cols[n_clusters])+
xlab("log(PM10) values")+
xlim(xlims)
}
cat(crayon::red("- get_hist_continuos_plot(df_cluster_cut)\n"))
get_hist_continuos_plot = function(df_cluster_cut,titolo=paste("Time",time),verbose=1){
clusters_now = df_cluster_cut$clusters
# n_clusters = max(clusters_now)
n_clusters = unique(clusters_now)
ycurrent = y[,paste0("w",time)]
cat(crayon::red("Time",time,"\n"))
if(verbose==1){
# for (cl in 1:n_clusters){
for (cl in n_clusters){
cat("Cluster",cl,"- size",length(ycurrent[which(clusters_now==cl)]),
"- mean",mean(ycurrent[which(clusters_now==cl)]),"\n")
}
}
clust_vals = clusters_now[1:105]
df_temp = data.frame(clust_vals=clust_vals,ycurrent=ycurrent)
pad = 2
# p = ggplot(df_temp, aes(ycurrent, fill = factor(clust_vals))) +
p = ggplot(df_temp, aes(ycurrent, fill = cols[clust_vals])) +
# scale_fill_manual(values = colora(n_clusters,77,0),name="Cluster")+
# scale_fill_identity(guide="legend",labels=paste0("cl",1:max(clust_vals)),
# breaks=cols[1:max(clust_vals)])+
scale_fill_identity(guide="legend",labels=paste0("cl",n_clusters),
breaks=cols[n_clusters])+
guides(fill = guide_legend(title = "Clusters"))+
geom_density(alpha = 0.3)+
ggtitle(titolo)+
theme_bw()+
xlab("log(PM10) values")+
ylab("")+
xlim(xlims)
}
cat(crayon::red("- get_boxplot_plot(df_cluster_cut)\n"))
get_boxplot_plot = function(df_cluster_cut,cols=cols_default,titolo=paste("Time",time),annotate=FALSE){
clusters_now = df_cluster_cut$clusters # needs to be already mode corrected if wanted
# n_clusters = max(clusters_now)
n_clusters = unique(clusters_now)
ycurrent = y[,paste0("w",time)]
clsize = table(clusters_now)
clust_vals = clusters_now[1:105]
df_temp = data.frame(clusters=clust_vals,ycurrent=ycurrent)
pad = 2
p = ggplot(df_temp, aes(as.factor(clusters),ycurrent,
fill = cols[clusters]
# color = cols[clust_vals]
))+
geom_boxplot()+
# geom_jitter(width=0.2)+
ggtitle(titolo)+
labs(title = paste("Cluster map - time",time))+
guides(fill = guide_legend(title = "Clusters"))+
# theme_classic()
theme_bw()+
xlab("clusters")+
ylab("log(PM10) values")+
ylim(xlims)+
# xlim(extrema(ycurrent)+c(-pad,pad))+
# scale_fill_identity(guide="legend",labels=paste0("cl",1:max(clust_vals)),
# breaks=cols[1:max(clust_vals)])+
scale_fill_identity(guide="legend",labels=paste0("cl",n_clusters),
breaks=cols[n_clusters])
if(annotate==TRUE){
p = p+ annotate("text", x = n_clusters, y = 1.3, label = paste0("size: ",as.vector(clsize)),col="gray")
}
return(p)
# scale_color_identity(guide="legend",labels=paste0("cl",1:max(clust_vals)),
# breaks=cols[1:max(clust_vals)])
}
library(gridExtra)
cat(crayon::red("- plot_graph_and_hist(df_cluster_cut)\n"))
plot_graph_and_hist = function(df_cluster_cut,cols=cols_default,titolo=paste("Time",time),annotate=FALSE,jittera=FALSE){
clusters_now = df_cluster_cut$clusters
# GRAPH #######################
q_graph = get_graph_plot(df_cluster_cut,cols,titolo = titolo)
# HIST #######################
# by hand as we have to remove the legend here, while the function produces it
# n_clusters = max(clusters_now)
n_clusters = unique(clusters_now)
clsize = table(clusters_now)
ycurrent = y[,paste0("w",time)]
clust_vals = clusters_now[1:105]
df_temp = data.frame(clusters=clust_vals,ycurrent=ycurrent)
########## HIST
# p = ggplot(df_temp, aes(ycurrent,
# 						fill = cols[clust_vals] # case FILL
# 						# color = cols[clust_vals] # case COLOR
# ))+
# 	geom_histogram(alpha=0.5,
# 				   # fill="white", # case COLOR
# 				   position="identity")+
# 	ggtitle(titolo)+
# 	# guides(color = guide_legend(title = "Clusters"))+
# 	theme_bw()+
# 	theme(legend.position = "none")+
# 	# scale_color_identity(guide="legend",labels=paste0("cl",1:max(clust_vals)),
# 						 # breaks=cols[1:max(clust_vals)])+
# 	scale_fill_identity(guide="legend",labels=paste0("cl",n_clusters), # case FILL
# 	# scale_color_identity(guide="legend",labels=paste0("cl",n_clusters), # case COLOR
# 						 breaks=cols[n_clusters])+
# 	xlab("log(PM10) values")+
# 	xlim(xlims)
# p
############ BOXPLOT
p = ggplot(df_temp, aes(as.factor(clusters),ycurrent,
fill = cols[clusters]
# color = cols[clust_vals]
))+
geom_boxplot(position = "identity")
if(jittera==TRUE){
p = p+ geom_jitter(width=0.2,size=1,col="#9202af")
}
p = p +
theme_bw()+
theme(legend.position = "none")+
scale_fill_identity(guide="legend",labels=paste0("cl",n_clusters),
breaks=cols[n_clusters])+
ylab("log(PM10) values")+
xlab("clusters")+
ylim(xlims)
if(annotate==TRUE){
p = p+ annotate("text", x = n_clusters, y = 1.3, label = paste0("size\n",as.vector(clsize)),col="gray")
}
p = grid.arrange(q_graph, p, ncol=2,widths=c(1.8,1.2))
# p = arrangeGrob(q_graph, p, ncol=2,widths=c(1.8,1.2))
}
Federica_covariates_plot = function(df_cluster_cut,cols=cols_default,titolo=paste("Time",time),covariates_idx){
clusters_now = df_cluster_cut$clusters
# GRAPH #######################
q_graph = get_graph_plot(df_cluster_cut,cols,titolo = titolo)
n_clusters = unique(clusters_now)
clsize = table(clusters_now)
ycurrent = y[,paste0("w",time)]
clust_vals = clusters_now[1:105]
df_temp = data.frame(clusters=clust_vals,ycurrent=ycurrent)
############ BOXPLOT PM10
p_boxplot_pm = ggplot(df_temp, aes(as.factor(clusters),ycurrent,
fill = cols[clusters]
# color = cols[clust_vals]
))+geom_boxplot(position = "identity") +
theme_bw()+
theme(legend.position = "none")+
scale_fill_identity(guide="legend",labels=paste0("cl",n_clusters),
breaks=cols[n_clusters])+
ylab("log(PM10) values")+
xlab("clusters")+
ylim(xlims)
############ BOXPLOT covariate
df_wsc_week = df_wsc[which(df_wsc$week==time),]
df_temp$Altitude = df_wsc_week$Altitude
df_temp$WE_wind_speed_100m_max = df_wsc_week$WE_wind_speed_100m_max
df_temp$LA_lvi = df_wsc_week$LA_lvi
df_temp$EM_nox_sum = df_wsc_week$EM_nox_sum
p_boxplot_Altitude = ggplot(df_temp, aes(as.factor(clusters),
Altitude,fill = cols[clusters]))+
geom_boxplot(position = "identity") +
theme_bw()+
theme(legend.position = "none")+
scale_fill_identity(guide="legend",labels=paste0("cl",n_clusters),breaks=cols[n_clusters])+
ylab("Altitude")+
xlab("clusters")+
ylim(extrema(df_wsc$Altitude))
p_boxplot_WE_wind_speed_100m_max = ggplot(df_temp, aes(as.factor(clusters),
WE_wind_speed_100m_max,fill = cols[clusters]))+
geom_boxplot(position = "identity") +
theme_bw()+
theme(legend.position = "none")+
scale_fill_identity(guide="legend",labels=paste0("cl",n_clusters),breaks=cols[n_clusters])+
ylab("WE_wind_speed_100m_max")+
xlab("clusters")+
ylim(extrema(df_wsc$WE_wind_speed_100m_max))
p_boxplot_LA_lvi = ggplot(df_temp, aes(as.factor(clusters),
LA_lvi,fill = cols[clusters]))+
geom_boxplot(position = "identity") +
theme_bw()+
theme(legend.position = "none")+
scale_fill_identity(guide="legend",labels=paste0("cl",n_clusters),breaks=cols[n_clusters])+
ylab("LA_lvi")+
xlab("clusters")+
ylim(extrema(df_wsc$LA_lvi))
p_boxplot_EM_nox_sum = ggplot(df_temp, aes(as.factor(clusters),
EM_nox_sum,fill = cols[clusters]))+
geom_boxplot(position = "identity") +
theme_bw()+
theme(legend.position = "none")+
scale_fill_identity(guide="legend",labels=paste0("cl",n_clusters),breaks=cols[n_clusters])+
ylab("EM_nox_sum")+
xlab("clusters")+
ylim(extrema(df_wsc$EM_nox_sum))
library(lubridate)
# data_from_to = data_agc_lomb[intersect(which(data_agc_lomb$Time>=as.Date("2018-01-01")),
# which(data_agc_lomb$Time<=as.Date("2018-12-31"))),]
# data_from_to$week = week(data_from_to$Time)
# data_from_to = data_from_to[which(data_from_to$week==time),]
# OR this
data_from_to = df_wsc_week
wind_arrows <- data.frame(
longitude = sites_plt$Longitude,
latitude = sites_plt$Latitude,
direction = cardinal_to_degree(data_from_to$WE_mode_wind_direction_100m),
Intensity = as.numeric(data_from_to$WE_wind_speed_100m_mean)
)
# Calcola le coordinate di fine delle frecce in base alla direzione
# l'intensitÃ  verra colorata invece di cambiare in lunghezza
wind_arrows$end_longitude =( wind_arrows$longitude + sin(wind_arrows$direction)/10)
wind_arrows$end_latitude = ( wind_arrows$latitude + cos(wind_arrows$direction)/10)
# put a 0 in the NA
wind_arrows[is.na(wind_arrows)] <- 0
mappa_wind <- ggplot(data = wind_arrows) +
# geom_sf(data = shp_map, fill = color_background_map , color = "black", linewidth = 0.5,alpha=0.6)+
geom_sf(data = altre_regioni, fill = color_empty ,color = color_fill, linewidth = 0.1,alpha=0.1, show.legend = FALSE) +
geom_sf(data = lombardia_2, fill = color_empty, color = color_comuni_lombardia, linewidth = 0.3,alpha=0.7, show.legend = FALSE) +
coord_sf(xlim = range(sites$longitude) + padding, ylim = range(sites$latitude) + padding, expand = FALSE)+
# coord_sf(xlim = range(na.omit(wind_arrows$longitude))+padding,
# ylim = range(na.omit(wind_arrows$latitude))+padding, expand = FALSE)+
geom_segment(data = wind_arrows,
aes(x = longitude, y = latitude, xend = end_longitude, yend = end_latitude,
color = Intensity),
arrow = arrow(angle=10, type = "open", length = unit(0.2, "inches"), ends = "last"),
lineend = "round", linewidth = 0.4,alpha=0.9 )+
theme_bw()+
theme(panel.grid = element_blank())+
labs(title="Wind map")+
ylab("")+
xlab("")
p = grid.arrange(q_graph,
p_boxplot_pm,
p_boxplot_Altitude,
p_boxplot_WE_wind_speed_100m_max,
p_boxplot_LA_lvi,
p_boxplot_EM_nox_sum,
mappa_wind,
ncol=2,
# widths=c(1.8,1.2),
layout_matrix = rbind(c(1,1,1,1,2,2,2),
c(1,1,1,1,2,2,2),
c(1,1,1,1,2,2,2),
# c(1,1,1,1,2,2),
c(3,4,5,6,7,7,7),
c(3,4,5,6,7,7,7))
)
return(p)
}
easy_plot = function(clusters_input,nintput=30){
clusters_input = clusters_input[1:105]
sites = data.frame(
longitude = unique(df_weekly$Longitude),
latitude = unique(df_weekly$Latitude))
std_sites = data.frame(
longitude = unique(df_wsc$Longitude),
latitude = unique(df_wsc$Latitude))
stations = unique(df_wsc$IDStations)
y=data.frame()
for(st in stations){
y_we_pm10=cbind(as.data.frame(st),t(df_wsc[which(df_wsc$IDStations==st),"AQ_pm10"]))
y=rbind(y,y_we_pm10)
}
rownames(y) = NULL
colnames(y)<- c("id",paste0("w", 1:53))
df_temp = data.frame(
Longitude = sites$longitude,
Latitude = sites$latitude,
clusters = clusters_input
)
cols = color_correct_clusters(df_temp,idea=2,verbose=0,nint=nintput)
p = plot_graph_and_hist(df_temp,cols,jittera = T)
}
cols = colora(10,"div")[-2] # divergent palette; togliamo il giallino
time_span = c(1:53)
sites = data.frame(
longitude = unique(df_weekly$Longitude),
latitude = unique(df_weekly$Latitude))
std_sites = data.frame(
longitude = unique(df_wsc$Longitude),
latitude = unique(df_wsc$Latitude))
stations = unique(df_wsc$IDStations)
y=data.frame()
for(st in stations){
y_we_pm10=cbind(as.data.frame(st),t(df_wsc[which(df_wsc$IDStations==st),"AQ_pm10"]))
y=rbind(y,y_we_pm10)
}
rownames(y) = NULL
colnames(y)<- c("id",paste0("w", 1:53))
df_wsc
plot(sites)
load("../data/df_weekly.Rdata")
nobs <- 53 # number of week for each stations
nsubject <- length(unique(df_weekly$IDStations)) # number od station
# input data for the curve_PPmX function
y = matrix(nrow = 0, ncol = nobs)
y = df_weekly$AQ_pm10
#
dat <- data.frame(y=c(y),
z=rep(1:nobs, times=nsubject), # is the time
Name=rep(1:nsubject, each=nobs))
allXcons = list()
Xcon1 = data.frame(altitude = df_weekly$Altitude[seq(from=1, by = 53, length.out=105)],
EM_nox_sum = df_weekly$EM_nox_sum[seq(from=1, by = 53, length.out=105)])
for (i in 1:53) {
allXcons[[i]] = data.frame(altitude = df_weekly$Altitude[seq(from=i, by = 53, length.out=105)],
EM_nox_sum = df_weekly$EM_nox_sum[seq(from=i, by = 53, length.out=105)])
}
subject_obs_vec <- dat$Name
y <- dat$y
z <- dat$z
nknots <- 15
niter <- 20000
nburn <- 10000
nthin <- 10 # we consider every nthin iteartions
nout <- (niter-nburn)/nthin # the number of interatio that we coniser from the mcmc
## the order here is c(mu0, s20, v, k0, nu0, a0, alpha)
## If simularity is N-NIG then k0 and nu0 are used but v is not
## If simularity is N-N then v is used but no k0 and nu0
simparms <- c(0.0, 1.0, 0.1, 1.0, 1.0, 0.1, 1) # WHAT IS THEIR MEANING IF WE DON'T USE COV
modelPriors <- c(0.5, # Asig
1000^2, # s2_mu
0, # mb0
1000^2, # s2b0
1, # as2b0
1, # bs2b0
1, # at
1.0/0.05) # bt
fit <- curve_ppmx(y=cbind(y), z=z,
subject=subject_obs_vec,
Xcon = allXcons[[1]], Xcat = NULL,
Xconp=NULL, Xcatp=NULL,
PPM=FALSE, M=1,
q=3, rw_order=1, balanced=1,
nknots=nknots, npredobs=1,
Aparm=100,
modelPriors=modelPriors,
similarity_function=1,
consim=1, calibrate=0,
simParms=simparms,
mh=c(0.1, 1e-4),
draws=niter,
burn=nburn,
thin=nthin)
all_fits = list()
for (time in 1:53){
fit <- curve_ppmx(y=cbind(y), z=z,
subject=subject_obs_vec,
Xcon = allXcons[[time]], Xcat = NULL,
Xconp=NULL, Xcatp=NULL,
PPM=FALSE, M=1,
q=3, rw_order=1, balanced=1,
nknots=nknots, npredobs=1,
Aparm=100,
modelPriors=modelPriors,
similarity_function=1,
consim=1, calibrate=0,
simParms=simparms,
mh=c(0.1, 1e-4),
draws=niter,
burn=nburn,
thin=nthin)
all_fits[[time]] = fit
}
save(all_fits, file="all_fits_curveppmx.Rdata")
load("../data/all_fits_curveppmx.Rdata")
salso_out = salso(all_fits[[1]]$Si,loss=binder(a=NULL), maxNClusters = 8)
easy_plot(salso_out)
clus <- salso(fit$Si, binder(a=NULL), nRuns=4, nCores=1, maxNClusters = 0)
plot(summary(clus),
type = c("heatmap", "mds", "pairs", "dendrogram")[1])
plot(summary(clus),
type = c("heatmap", "mds", "pairs", "dendrogram")[4])
load("../data/all_fits_curveppmx.Rdata")
getwd()
setwd("/Users/abylaikhan.orynbassar/Documents/GitHub/progetto-bayesian")
load("../data/all_fits_curveppmx.Rdata")
getwd()
load("../data/all_fits_curveppmx.Rdata")
load("../src/all_fits_curveppmx.Rdata")
FIT = all_fits
base_folder = "Curve PPMx"
lpml_tot_gppmx = waic_tot_gppmx = 0
for (time in 1:53){
lpml_tot_gppmx = lpml_tot_gppmx + FIT[[time]]$lpml
waic_tot_gppmx = waic_tot_gppmx + FIT[[time]]$WAIC
}
cat(crayon::red("\nLPML =",lpml_tot_gppmx, "\nWAIC =",waic_tot_gppmx))
# niente ancora lontani da drpm
salso_out_list = list()
salso_out_matrix = matrix(NA,nrow=53,ncol=105)
df_cluster = data.frame(Longitude=c(),Latitude=c(),values=c(),clusters=c(),Time=c())
for(time in time_span){
# tune here your cluster generation
salso_out <- salso(FIT[[time]]$Si,
loss=binder(a=1.4), # example of a tuning
maxNClusters = 8
)
salso_out_list[[time]] = salso_out
salso_out_matrix[time,] = salso_out
df_temp = data.frame(
Longitude = sites$longitude,
Latitude = sites$latitude,
clusters = salso_out[1:105]
)
# increment nint_FIT until there is no error
nint_FIT = 16
cols = color_correct_clusters(df_temp,idea=2,verbose=0,nint=nint_FIT)
################################################
df_temp$Time = rep(time,dim(df_temp)[1])
df_cluster = rbind(df_cluster,df_temp)
# clusters log
clusters_now = df_temp$clusters
# n_clusters = max(clusters_now)
n_clusters = unique(clusters_now)
ycurrent = y[,paste0("w",time)]
cat(crayon::red("Time",time,"- #clusters =",length(unique(clusters_now)),"\n"))
# for (cl in n_clusters){
# cat("Cluster",cl,"- size",length(ycurrent[which(clusters_now==cl)]),
# "- mean",mean(ycurrent[which(clusters_now==cl)]),"\n")
# }
################################################
df_cluster_cut = df_temp
# if you want to see results directly here, use these lines
# df_cluster_cut = df_cluster[df_cluster$Time==time,] # same def
# cols = ... defined above
# salso_out = salso_out_list[[time]]
# ssout = summary(salso_out)
# plot(ssout,type="heatmap")
# plot(ssout,type="mds")
# plot(ssout,type="pairs",data=std_sites)
# text(0.2,0.98,paste0("Time ",time))
# plot(ssout,type="dendrogram")
# q = get_graph_plot(df_cluster_cut,cols)
# print(q)
# p = plot_graph_and_hist(df_cluster_cut,cols)
################################################
# test for covariates plots
# png("test.png",units="px",height = 2400,width = 2000)
# p = Federica_covariates_plot(df_cluster_cut,cols,
# 				 titolo = paste("Cluster map, time",time,"- Gaussian PPMx"),var_selected_idxs)
# ggsave(p,file="test.png",units="px",width=3500, height=3000, dpi=400)
# ggsave(p,file="test.pdf",width=15, height=10)
# dev.off()
}
dim(salso_out)
load("../src/all_fits_curveppmx.Rdata")
FIT = all_fits
base_folder = "Curve PPMx"
lpml_tot_gppmx = waic_tot_gppmx = 0
for (time in 1:53){
lpml_tot_gppmx = lpml_tot_gppmx + FIT[[time]]$lpml
waic_tot_gppmx = waic_tot_gppmx + FIT[[time]]$WAIC
}
cat(crayon::red("\nLPML =",lpml_tot_gppmx, "\nWAIC =",waic_tot_gppmx))
# niente ancora lontani da drpm
salso_out_list = list()
salso_out_matrix = matrix(NA,nrow=53,ncol=105)
df_cluster = data.frame(Longitude=c(),Latitude=c(),values=c(),clusters=c(),Time=c())
for(time in time_span){
# tune here your cluster generation
salso_out <- salso(FIT[[time]]$Si,
loss=binder(a=1.4), # example of a tuning
maxNClusters = 8
)
salso_out_list[[time]] = salso_out
salso_out_matrix[time,] = salso_out
df_temp = data.frame(
Longitude = sites$longitude,
Latitude = sites$latitude,
clusters = salso_out[1:105]
)
# increment nint_FIT until there is no error
nint_FIT = 16
cols = color_correct_clusters(df_temp,idea=2,verbose=0,nint=nint_FIT)
################################################
df_temp$Time = rep(time,dim(df_temp)[1])
df_cluster = rbind(df_cluster,df_temp)
# clusters log
clusters_now = df_temp$clusters
# n_clusters = max(clusters_now)
n_clusters = unique(clusters_now)
ycurrent = y[,paste0("w",time)]
cat(crayon::red("Time",time,"- #clusters =",length(unique(clusters_now)),"\n"))
# for (cl in n_clusters){
# cat("Cluster",cl,"- size",length(ycurrent[which(clusters_now==cl)]),
# "- mean",mean(ycurrent[which(clusters_now==cl)]),"\n")
# }
################################################
df_cluster_cut = df_temp
# if you want to see results directly here, use these lines
# df_cluster_cut = df_cluster[df_cluster$Time==time,] # same def
# cols = ... defined above
# salso_out = salso_out_list[[time]]
# ssout = summary(salso_out)
# plot(ssout,type="heatmap")
# plot(ssout,type="mds")
# plot(ssout,type="pairs",data=std_sites)
# text(0.2,0.98,paste0("Time ",time))
# plot(ssout,type="dendrogram")
# q = get_graph_plot(df_cluster_cut,cols)
# print(q)
# p = plot_graph_and_hist(df_cluster_cut,cols)
################################################
# test for covariates plots
# png("test.png",units="px",height = 2400,width = 2000)
# p = Federica_covariates_plot(df_cluster_cut,cols,
# 				 titolo = paste("Cluster map, time",time,"- Gaussian PPMx"),var_selected_idxs)
# ggsave(p,file="test.png",units="px",width=3500, height=3000, dpi=400)
# ggsave(p,file="test.pdf",width=15, height=10)
# dev.off()
}
