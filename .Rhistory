# exclude[[12]][[1]] = c(80)
# exclude[[13]][[1]] = c(80)
#
# exclude[[44]][[1]] = c(101,92)
#
# exclude[[46]][[1]] = c(92,101)
#
# exclude[[47]][[1]] = c(92,101)
# exclude[[47]][[2]] = c(80)
#
# exclude[[48]][[1]] = c(92,101)
#
# exclude[[51]][[1]] = c(92,101)
# exclude[[51]][[2]] = c(80,52)
#
# exclude[[52]][[1]] = c(92,101)
# exclude[[52]][[2]] = c(80,52)
#
# exclude[[53]][[1]] = c(92,101)
# exclude[[53]][[2]] = c(80,20,69)
salso_out_list = list()
salso_out_matrix = matrix(NA,nrow=53,ncol=105)
df_cluster = data.frame(Longitude=c(),Latitude=c(),values=c(),clusters=c(),Time=c())
for(time in time_span){
# salso_out <- salso(t(drpm_model$Si[time,,]),
# 				   # loss=binder(),
# 				   loss=binder(a=abinder[time]), # chosen one, better
# 				   maxNClusters = 6
# 				   )
salso_out = rep(0,105)
if(length(exclude[[time]])==0 ){
cat("no touch\n")
salso_out <- salso(t(drpm_model$Si[time,,]),
loss=binder(a=1.3),
# loss=binder(),
# loss=binder(a=abinder[time]), # chosen one, better
maxNClusters = 6
)
} else {
cat("correction\n")
exclude_st = Reduce(union,exclude[[time]])
# salso_out[-exclude_st] <- salso(t(drpm_model$Si[time,-exclude_st,]),
salso_out <- salso(t(drpm_model$Si[time,,]),
# loss=binder(),
loss=binder(a=abinder[time]), # chosen one, better
maxNClusters = 6
)
curr_n_clusters = max(salso_out[-exclude_st])
for(i in 1:length(exclude[[time]])){
curr_n_clusters = curr_n_clusters+1
salso_out[exclude[[time]][[i]]] = curr_n_clusters
}
}
salso_out_list[[time]] = salso_out
salso_out_matrix[time,] = salso_out
################################################
df_temp = data.frame(
Longitude = sites$longitude,
Latitude = sites$latitude,
clusters = salso_out[1:105]
)
# increment nint until there is no error
cols = color_correct_clusters(df_temp,idea=2,verbose=0,nint=12)
df_temp$Time = rep(time,dim(df_temp)[1])
df_cluster = rbind(df_cluster,df_temp)
# clusters log
clusters_now = df_temp$clusters
# n_clusters = max(clusters_now)
n_clusters = unique(clusters_now)
ycurrent = y[,paste0("w",time)]
cat(crayon::red("Time",time,"- #clusters =",length(unique(clusters_now)),"\n"))
# for (cl in n_clusters){
# cat("Cluster",cl,"- size",length(ycurrent[which(clusters_now==cl)]),
# "- mean",mean(ycurrent[which(clusters_now==cl)]),"\n")
# }
}
medie = matrix(NA,nrow=105,ncol=1)
stations=unique(df_wsc$IDStations)
for (st in 1:105){
medie[st,1] = mean(df_wsc$AQ_pm10[which(df_wsc$IDStations==stations[st])])
}
# medie
order(medie[,1])
cl_regions = list()
for (i in 1:10){
cl_regions[[i]] = numeric()
}
tssites = sites_plt
tssites$cl = rep(0,105)
for (st in 1:105){
mo = Mode(salso_out_matrix[,st])
# cat("Station",st,"has mode cluster label equal to",mo,"\n")
cl_regions[[mo]] = c(cl_regions[[mo]],st)
tssites$cl[st] = mo
}
cl_regions
## manual changes if we want to separately study some suspitious stations
cl_regions[[1]] = setdiff(cl_regions[[1]],80)
cl_regions[[6]] = 80
tssites$cl[80] = 6
# cl_regions[[1]] = setdiff(cl_regions[[1]],c(80,20))
# cl_regions[[6]] = 80
# tssites$cl[80] = 6
# cl_regions[[7]] = 20
# tssites$cl[20] = 7
cl_regions
ys = matrix(NA,nrow=length(cl_regions),53)
stdevys = matrix(NA,nrow=length(cl_regions),53)
for (i in 1:length(cl_regions)){
ys[i,] = apply(y[cl_regions[[i]],2:54],2,mean)
stdevys[i,] = sqrt(apply(y[cl_regions[[i]],2:54],2,var))
}
# unfortunately automatically it does not work :/
dts1 = data.frame(xx=c(1:53,53:1), yy=c(ys[1,]-1/2*stdevys[1,],rev(ys[1,]+1/2*stdevys[1,])))
dts2 = data.frame(xx=c(1:53,53:1), yy=c(ys[2,]-1/2*stdevys[2,],rev(ys[2,]+1/2*stdevys[2,])))
dts3 = data.frame(xx=c(1:53,53:1), yy=c(ys[3,]-1/2*stdevys[3,],rev(ys[3,]+1/2*stdevys[3,])))
dts4 = data.frame(xx=c(1:53,53:1), yy=c(ys[4,]-1/2*stdevys[4,],rev(ys[4,]+1/2*stdevys[4,])))
dts5 = data.frame(xx=c(1:53,53:1), yy=c(ys[5,]-1/2*stdevys[5,],rev(ys[5,]+1/2*stdevys[5,])))
dts6 = data.frame(xx=c(1:53,53:1), yy=c(ys[6,]-1/2*stdevys[6,],rev(ys[6,]+1/2*stdevys[6,])))
dts7 = data.frame(xx=c(1:53,53:1), yy=c(ys[7,]-1/2*stdevys[7,],rev(ys[7,]+1/2*stdevys[7,])))
dts8 = data.frame(xx=c(1:53,53:1), yy=c(ys[8,]-1/2*stdevys[8,],rev(ys[8,]+1/2*stdevys[8,])))
dts9 = data.frame(xx=c(1:53,53:1), yy=c(ys[9,]-1/2*stdevys[9,],rev(ys[9,]+1/2*stdevys[9,])))
dts10 = data.frame(xx=c(1:53,53:1), yy=c(ys[10,]-1/2*stdevys[10,],rev(ys[10,]+1/2*stdevys[10,])))
alfa = 50
lsize=0.9
cols = colora(12,"div",0)[-2]
cols_trasp = cols
for (i in 1:12){
cols_trasp[i] = rgb(as.vector(col2rgb(cols[i]))[1],as.vector(col2rgb(cols[i]))[2],
as.vector(col2rgb(cols[i]))[3],alfa,maxColorValue = 255)
}
pts = ggplot() +
# geom_vline(xintercept = 10,col="#990011")+
geom_vline(xintercept = 10,col="gray50")+
geom_polygon(data=dts1, mapping=aes(x=xx, y=yy,fill=paste0(cols_trasp[1])))+
geom_polygon(data=dts2, mapping=aes(x=xx, y=yy,fill=paste0(cols_trasp[2])))+
geom_polygon(data=dts3, mapping=aes(x=xx, y=yy,fill=paste0(cols_trasp[3])))+
geom_polygon(data=dts4, mapping=aes(x=xx, y=yy,fill=paste0(cols_trasp[4])))+
geom_polygon(data=dts5, mapping=aes(x=xx, y=yy,fill=paste0(cols_trasp[5])))+
geom_polygon(data=dts6, mapping=aes(x=xx, y=yy,fill=paste0(cols_trasp[6])))+
geom_polygon(data=dts7, mapping=aes(x=xx, y=yy,fill=paste0(cols_trasp[7])))+
geom_polygon(data=dts8, mapping=aes(x=xx, y=yy,fill=paste0(cols_trasp[8])))+
geom_polygon(data=dts8, mapping=aes(x=xx, y=yy,fill=paste0(cols_trasp[8])))+
geom_polygon(data=dts10, mapping=aes(x=xx, y=yy,fill=paste0(cols_trasp[10])))+
geom_line(aes(x=1:53,y=ys[1,],col=paste0(cols[1])),size=lsize)+
geom_line(aes(x=1:53,y=ys[2,],col=paste0(cols[2])),size=lsize)+
geom_line(aes(x=1:53,y=ys[3,],col=paste0(cols[3])),size=lsize)+
geom_line(aes(x=1:53,y=ys[4,],col=paste0(cols[4])),size=lsize)+
geom_line(aes(x=1:53,y=ys[5,],col=paste0(cols[5])),size=lsize)+
geom_line(aes(x=1:53,y=ys[6,],col=paste0(cols[6])),size=lsize)+
geom_line(aes(x=1:53,y=ys[7,],col=paste0(cols[7])),size=lsize)+
geom_line(aes(x=1:53,y=ys[8,],col=paste0(cols[8])),size=lsize)+
geom_line(aes(x=1:53,y=ys[9,],col=paste0(cols[9])),size=lsize)+
geom_line(aes(x=1:53,y=ys[10,],col=paste0(cols[10])),size=lsize)+
theme_bw()+
scale_fill_identity()+scale_color_identity()+
theme(panel.grid = element_blank())+
ylab("AQ_PM10")+xlab("Weeks")+theme(legend.position = "none")
pts
df_cluster_cut = data.frame(
Longitude = sites$longitude,
Latitude = sites$latitude,
clusters = tssites$cl,
Time = 1
)
cols_gr = cols[1:length(unique(tssites$cl))]
PP1 = get_graph_plot(df_cluster_cut,titolo = "Mode clusters",cols=cols_gr,verbose=0)
PP1
var_selected_to_plot = c("Altitude","EM_nox_sum","WE_tot_precipitation",
"WE_wind_speed_100m_max", "LA_lvi")
pts = list()
alfa = 50
lsize = 0.9
cols = colora(12,"div",0)[-2]
cols_trasp = cols
for (i in 1:12){
cols_trasp[i] = rgb(as.vector(col2rgb(cols[i]))[1],as.vector(col2rgb(cols[i]))[2],
as.vector(col2rgb(cols[i]))[3],alfa,maxColorValue = 255)
}
##########################################################
for (cova_name in var_selected_to_plot){
ys = matrix(NA,nrow=length(cl_regions),53)
stdevys = matrix(NA,nrow=length(cl_regions),53)
cova=data.frame()
for(st in stations){
cova=rbind(cova,cbind(as.data.frame(st),t(df_wsc[which(df_wsc$IDStations==st),cova_name])))
}
rownames(cova) = NULL; colnames(cova)<- c("id",paste0("w", 1:53))
for (i in 1:length(cl_regions)){
ys[i,] = apply(cova[cl_regions[[i]],2:54],2,mean)
stdevys[i,] = sqrt(apply(cova[cl_regions[[i]],2:54],2,var))
}
# unfortunately automatically it does not work :/
dts1 = data.frame(xx=c(1:53,53:1), yy=c(ys[1,]-1/2*stdevys[1,],rev(ys[1,]+1/2*stdevys[1,])))
dts2 = data.frame(xx=c(1:53,53:1), yy=c(ys[2,]-1/2*stdevys[2,],rev(ys[2,]+1/2*stdevys[2,])))
dts3 = data.frame(xx=c(1:53,53:1), yy=c(ys[3,]-1/2*stdevys[3,],rev(ys[3,]+1/2*stdevys[3,])))
dts4 = data.frame(xx=c(1:53,53:1), yy=c(ys[4,]-1/2*stdevys[4,],rev(ys[4,]+1/2*stdevys[4,])))
dts5 = data.frame(xx=c(1:53,53:1), yy=c(ys[5,]-1/2*stdevys[5,],rev(ys[5,]+1/2*stdevys[5,])))
dts6 = data.frame(xx=c(1:53,53:1), yy=c(ys[6,]-1/2*stdevys[6,],rev(ys[6,]+1/2*stdevys[6,])))
dts7 = data.frame(xx=c(1:53,53:1), yy=c(ys[7,]-1/2*stdevys[7,],rev(ys[7,]+1/2*stdevys[7,])))
dts8 = data.frame(xx=c(1:53,53:1), yy=c(ys[8,]-1/2*stdevys[8,],rev(ys[8,]+1/2*stdevys[8,])))
dts9 = data.frame(xx=c(1:53,53:1), yy=c(ys[9,]-1/2*stdevys[9,],rev(ys[9,]+1/2*stdevys[9,])))
dts10 = data.frame(xx=c(1:53,53:1), yy=c(ys[10,]-1/2*stdevys[10,],rev(ys[10,]+1/2*stdevys[10,])))
pts[[cova_name]] = ggplot() +
# geom_vline(xintercept = 10,col="#990011")+
geom_vline(xintercept = 10,col="gray50")+
geom_polygon(data=dts1, mapping=aes(x=xx, y=yy,fill=paste0(cols_trasp[1])))+
geom_polygon(data=dts2, mapping=aes(x=xx, y=yy,fill=paste0(cols_trasp[2])))+
geom_polygon(data=dts3, mapping=aes(x=xx, y=yy,fill=paste0(cols_trasp[3])))+
geom_polygon(data=dts4, mapping=aes(x=xx, y=yy,fill=paste0(cols_trasp[4])))+
geom_polygon(data=dts5, mapping=aes(x=xx, y=yy,fill=paste0(cols_trasp[5])))+
geom_polygon(data=dts6, mapping=aes(x=xx, y=yy,fill=paste0(cols_trasp[6])))+
geom_polygon(data=dts7, mapping=aes(x=xx, y=yy,fill=paste0(cols_trasp[7])))+
geom_polygon(data=dts8, mapping=aes(x=xx, y=yy,fill=paste0(cols_trasp[8])))+
geom_polygon(data=dts8, mapping=aes(x=xx, y=yy,fill=paste0(cols_trasp[8])))+
geom_polygon(data=dts10, mapping=aes(x=xx, y=yy,fill=paste0(cols_trasp[10])))+
geom_line(aes(x=1:53,y=ys[1,],col=paste0(cols[1])),size=lsize)+
geom_line(aes(x=1:53,y=ys[2,],col=paste0(cols[2])),size=lsize)+
geom_line(aes(x=1:53,y=ys[3,],col=paste0(cols[3])),size=lsize)+
geom_line(aes(x=1:53,y=ys[4,],col=paste0(cols[4])),size=lsize)+
geom_line(aes(x=1:53,y=ys[5,],col=paste0(cols[5])),size=lsize)+
geom_line(aes(x=1:53,y=ys[6,],col=paste0(cols[6])),size=lsize)+
geom_line(aes(x=1:53,y=ys[7,],col=paste0(cols[7])),size=lsize)+
geom_line(aes(x=1:53,y=ys[8,],col=paste0(cols[8])),size=lsize)+
geom_line(aes(x=1:53,y=ys[9,],col=paste0(cols[9])),size=lsize)+
geom_line(aes(x=1:53,y=ys[10,],col=paste0(cols[10])),size=lsize)+
theme_bw()+
scale_fill_identity()+scale_color_identity()+
theme(panel.grid = element_blank())+
ylab(cova_name)+xlab("Weeks")+theme(legend.position = "none")
# print(pts)
}
# devtools::install_github("ricardo-bion/ggradar")
library(ggradar)
devtools::install_github("ricardo-bion/ggradar")
# devtools::install_github("ricardo-bion/ggradar")
library(ggradar)
# ma esce un po' bruttino, forse si può fare qualcosa in coordinate radiali
# oppure lasciar perdere e usare altri plot
ys = matrix(NA,nrow=length(cl_regions),8)
cova_name = "WE_mode_wind_direction_100m"
cova=data.frame()
for(st in stations){
cont = table(df_wsc$WE_mode_wind_direction_100m[which(df_wsc$IDStations==st)])
cont = as.data.frame(cont)
vec = c(
if (length(which(cont$Var1=="N")>0)) cont$Freq[which(cont$Var1=="N")] else 0,
if (length(which(cont$Var1=="NE")>0)) cont$Freq[which(cont$Var1=="NE")] else 0,
if (length(which(cont$Var1=="E")>0)) cont$Freq[which(cont$Var1=="E")] else 0,
if (length(which(cont$Var1=="SE")>0)) cont$Freq[which(cont$Var1=="SE")] else 0,
if (length(which(cont$Var1=="S")>0)) cont$Freq[which(cont$Var1=="S")] else 0,
if (length(which(cont$Var1=="SW")>0)) cont$Freq[which(cont$Var1=="SW")] else 0,
if (length(which(cont$Var1=="W")>0)) cont$Freq[which(cont$Var1=="W")] else 0,
if (length(which(cont$Var1=="NW")>0)) cont$Freq[which(cont$Var1=="NW")] else 0
)
cova=rbind(cova,vec)
}
colnames(cova) = c("N","NE","E","SE","S","SW","W","NW"); rownames(cova) = NULL
for (i in 1:length(cl_regions)){
ys[i,] = apply(cova[cl_regions[[i]],1:8],2,sum)
# stdevys[i,] = sqrt(apply(cova[cl_regions[[i]],2:54],2,var))
}
ys
ys = as.data.frame(ys)
ys = ys / max(ys)
ys = cbind(1:10,ys)
colnames(ys) = c("Group","N","NE","E","SE","S","SW","W","NW")
ggradar(ys,
# base.size = 2,
background.circle.colour = "white",
# grid.max = max(ys),
group.colours = cols, legend.position = "none",
values.radar = c(""))
# we need cl_clusters and the covariates to study
names(pts)
pts[["LA_lvi"]]
for(time in time_span){
salso_out = salso_out_list[[time]]
################################################
cat(crayon::red("Time",time,"- #clusters =",length(unique(salso_out[1:105])),"\n"))
ssout = summary(salso_out)
png(filename=paste0("./figures/DRPM/Salso/Salso-",sprintf("%02d",time),".png"),width=600,height=500)
# plot(ssout,type="heatmap")
# plot(ssout,type="mds")
plot(ssout,type="pairs",data=std_sites)
text(0.3,0.98,paste0("Time ",time," - ",base_folder))
# plot(ssout,type="dendrogram")
dev.off()
}
mode_clusters <- list(
c(1, 14, 19, 20, 21, 40, 41, 52, 62, 65, 66, 67, 69, 71, 74, 80, 83, 84, 102),
c(2, 3, 5, 7, 8, 9, 11, 12, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 48, 50, 53, 56, 57, 61, 63, 64, 70, 72, 77, 82, 85, 87, 88, 90, 91, 98, 99),
c(4, 6, 10, 13, 15, 16, 17, 18, 22, 23, 24, 25, 27, 28, 39, 42, 43, 46, 49, 51, 54, 55, 58, 103, 105),
c(44, 45, 47, 59, 60, 68, 73, 75, 76, 78, 79, 81, 86, 89, 93, 94, 95, 96, 97, 100, 104),
c(92, 101)
)
mode_clusters
mode_clusters <- list(
c(1, 14, 19, 20, 21, 40, 41, 52, 62, 65, 66, 67, 69, 71, 74, 80, 83, 84, 102),
c(2, 3, 5, 7, 8, 9, 11, 12, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 48, 50, 53, 56, 57, 61, 63, 64, 70, 72, 77, 82, 85, 87, 88, 90, 91, 98, 99),
c(4, 6, 10, 13, 15, 16, 17, 18, 22, 23, 24, 25, 27, 28, 39, 42, 43, 46, 49, 51, 54, 55, 58, 103, 105),
c(44, 45, 47, 59, 60, 68, 73, 75, 76, 78, 79, 81, 86, 89, 93, 94, 95, 96, 97, 100, 104),
c(92, 101)
)
colors = rep(1,105)
for(i in 2:length(mode_clusters)){
colors[mode_clusters[[i]]] = i
}
colors
colors_clusters = rep(1,105)
for(i in 2:length(mode_clusters)){
colors_clusters[mode_clusters[[i]]] = i
}
colors_factor
cols_gr
df_cluster_cut
tssites$cl
tssites
tssites
tssites$cl
colors_clusters
df_interst
df_interst$color_clusters = rep(1,dim(df_interst)[1])
colors_clusters
df_interst$color_clusters = rep(1,dim(df_interst)[1])
ii = 1
for(st in unique(df_interst$IDStations)){
df_interst$color_clusters[df_interst$IDStations==st] = colors_clusters[ii]
ii = ii + 1
}
df_interst
colors_clusters
df_interst$color_clusters
#########################   XY PLOT  #####################################
cols = colora(6,970,show=F)
xyPlot_weekly <- function(file_name,var1_name,var2_name,size_name){
data_from_to = df_interst
len_time = 12 # number of weeks
var1 = data_from_to[,var1_name][[1]]
var2 = data_from_to[,var2_name][[1]]
if(class(size_name)!="numeric"){
size = data_from_to[,size_name][[1]]
}else{
size = size_name
}
colors_factor = factor(data_from_to$color_clusters)
if(class(size_name)!="numeric"){
p <- ggplot(
data_from_to,
aes(x = var1, y = var2, size = size, colour = colors_factor)) +
geom_point(alpha = 1) +
#scale_color_manual(values = cols) +
scale_color_viridis_d() +
scale_size(range = c(2, 12)) +
labs(x = var1, y = var2)+
guides(size = guide_legend(title = size_name), color = "none")+
theme_bw()
}else{
p <- ggplot(
data_from_to,
aes(x = var1, y = var2, size = size, colour = colors_factor)) +
geom_point(alpha = 1,size=size,show.legend = FALSE) +
scale_color_viridis_d() +
scale_size(range = c(2, 12)) +
labs(x = var1_name, y =var2_name)+
theme_bw()
}
return(animator(file_name,p,data_from_to,len_time,1080,1080,TRUE))
}
#file_name= "None"
var1_name = "WE_wind_speed_100m_max" # x
file_name= paste0("xy_plot_pm10-",var1_name)
var2_name = "AQ_pm10" # y
# you can change size to refer to a particular variable
size_name = 3
#size_name = "Altitude"
xyplot <- xyPlot_weekly(file_name,var1_name,var2_name,size_name)
xyplot
var2_name = "AQ_pm10" # y
size_name = 3
#file_name= "None"
for(vars in interest_variables){
file_name= paste0("xy_plot_pm10-",vars)
# you can change size to refer to a particular variable
#size_name = "Altitude"
xyplot <- xyPlot_weekly(file_name,vars,var2_name,size_name)
xyplot
}
interest_variables <- c("EM_nh3_livestock_mm",
"LA_hvi",
"LA_lvi",
"Altitude",
"EM_nox_sum",
"WE_wind_speed_100m_max",
"WE_mode_wind_direction_100m",
"WE_tot_precipitation")
other_vars <- c("IDStations","Latitude","Longitude","week")
df_interst <- df_weekly[,c(interest_variables,"AQ_pm10",other_vars)]
head(df_interst)
# small modification to not change functions
colnames(df_interst)[which(colnames(df_interst)=="week") ] = "Time"
xyplot <- xyPlot_weekly(paste0("xy_plot_pm10-",WE_tot_precipitation),"WE_tot_precipitation",var2_name,size_name)
xyplot <- xyPlot_weekly(paste0("xy_plot_pm10-","WE_tot_precipitation"),"WE_tot_precipitation",var2_name,size_name)
paste0("xy_plot_pm10-","WE_tot_precipitation")
cols = colora(6,970,show=F)
xyPlot_weekly <- function(file_name,var1_name,var2_name,size_name){
data_from_to = df_interst
len_time = 12 # number of weeks
var1 = data_from_to[,var1_name][[1]]
var2 = data_from_to[,var2_name][[1]]
if(class(size_name)!="numeric"){
size = data_from_to[,size_name][[1]]
}else{
size = size_name
}
colors_factor = factor(data_from_to$color_clusters)
if(class(size_name)!="numeric"){
p <- ggplot(
data_from_to,
aes(x = var1, y = var2, size = size, colour = colors_factor)) +
geom_point(alpha = 1) +
#scale_color_manual(values = cols) +
scale_color_viridis_d() +
scale_size(range = c(2, 12)) +
labs(x = var1, y = var2)+
guides(size = guide_legend(title = size_name), color = "none")+
theme_bw()
}else{
p <- ggplot(
data_from_to,
aes(x = var1, y = var2, size = size, colour = colors_factor)) +
geom_point(alpha = 1,size=size,show.legend = FALSE) +
scale_color_viridis_d() +
scale_size(range = c(2, 12)) +
labs(x = var1_name, y =var2_name)+
theme_bw()
}
return(animator(file_name,p,data_from_to,len_time,1080,1080,TRUE))
}
mode_clusters <- list(
c(1, 14, 19, 20, 21, 40, 41, 52, 62, 65, 66, 67, 69, 71, 74, 80, 83, 84, 102),
c(2, 3, 5, 7, 8, 9, 11, 12, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 48, 50, 53, 56, 57, 61, 63, 64, 70, 72, 77, 82, 85, 87, 88, 90, 91, 98, 99),
c(4, 6, 10, 13, 15, 16, 17, 18, 22, 23, 24, 25, 27, 28, 39, 42, 43, 46, 49, 51, 54, 55, 58, 103, 105),
c(44, 45, 47, 59, 60, 68, 73, 75, 76, 78, 79, 81, 86, 89, 93, 94, 95, 96, 97, 100, 104),
c(92, 101)
)
colors_clusters = rep(1,105)
for(i in 2:length(mode_clusters)){
colors_clusters[mode_clusters[[i]]] = i
}
df_interst$color_clusters = rep(1,dim(df_interst)[1])
ii = 1
for(st in unique(df_interst$IDStations)){
df_interst$color_clusters[df_interst$IDStations==st] = colors_clusters[ii]
ii = ii + 1
}
var2_name = "AQ_pm10" # y
size_name = 3
#size_name = "Altitude"
#file_name= "None"
for(vars in interest_variables){
file_name= paste0("xy_plot_pm10-",vars)
# you can change size to refer to a particular variable
xyplot <- xyPlot_weekly(file_name,vars,var2_name,size_name)
xyplot
}
xyplot <- xyPlot_weekly(paste0("xy_plot_pm10-","WE_tot_precipitation"),"WE_tot_precipitation",var2_name,size_name)
df_interst$logAltitude = log(df_interst$Altitude)
cols = colora(6,970,show=F)
xyPlot_weekly <- function(file_name,var1_name,var2_name,size_name){
data_from_to = df_interst
len_time = 12 # number of weeks
var1 = data_from_to[,var1_name][[1]]
var2 = data_from_to[,var2_name][[1]]
if(class(size_name)!="numeric"){
size = data_from_to[,size_name][[1]]
}else{
size = size_name
}
colors_factor = factor(data_from_to$color_clusters)
if(class(size_name)!="numeric"){
p <- ggplot(
data_from_to,
aes(x = var1, y = var2, size = size, colour = colors_factor)) +
geom_point(alpha = 1) +
#scale_color_manual(values = cols) +
scale_color_viridis_d() +
scale_size(range = c(2, 12)) +
labs(x = var1, y = var2)+
guides(size = guide_legend(title = size_name), color = "none")+
theme_bw()
}else{
p <- ggplot(
data_from_to,
aes(x = var1, y = var2, size = size, colour = colors_factor)) +
geom_point(alpha = 1,size=size,show.legend = FALSE) +
scale_color_viridis_d() +
scale_size(range = c(2, 12)) +
labs(x = var1_name, y =var2_name)+
theme_bw()
}
return(animator(file_name,p,data_from_to,len_time,1080,1080,TRUE))
}
xyplot <- xyPlot_weekly(paste0("xy_plot_pm10-","logAltitude"),"logAltitude",var2_name,size_name)
plot(df_weekly$Altitude,df_weekly$WE_surface_pressure)
cor(df_weekly$Altitude,df_weekly$WE_surface_pressure)
plot(df_weekly$Altitude,df_weekly$WE_surface_pressure)
plot(df_weekly$Altitude,log(df_weekly$WE_surface_pressure))
plot(log(df_weekly$Altitude),(df_weekly$WE_surface_pressure))
cor(log(df_weekly$Altitude),(df_weekly$WE_surface_pressure))
cor(log(df_weekly$Altitude),log(df_weekly$WE_surface_pressure))
cor((df_weekly$Altitude),log(df_weekly$WE_surface_pressure))
