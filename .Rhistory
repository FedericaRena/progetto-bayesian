salso_out_list = list()
salso_out_matrix = matrix(NA,nrow=53,ncol=105)
df_cluster = data.frame(Longitude=c(),Latitude=c(),values=c(),clusters=c(),Time=c())
for(time in time_span){
# tune here your cluster generation
salso_out <- salso(FIT[[time]]$Si,
loss=binder(a=1.4), # example of a tuning
maxNClusters = 8
)
salso_out_list[[time]] = salso_out
salso_out_matrix[time,] = salso_out
df_temp = data.frame(
Longitude = sites$longitude,
Latitude = sites$latitude,
clusters = salso_out[1:105]
)
# increment nint_FIT until there is no error
nint_FIT = 16
cols = color_correct_clusters(df_temp,idea=2,verbose=0,nint=nint_FIT)
################################################
df_temp$Time = rep(time,dim(df_temp)[1])
df_cluster = rbind(df_cluster,df_temp)
# clusters log
clusters_now = df_temp$clusters
# n_clusters = max(clusters_now)
n_clusters = unique(clusters_now)
ycurrent = y[,paste0("w",time)]
cat(crayon::red("Time",time,"- #clusters =",length(unique(clusters_now)),"\n"))
# for (cl in n_clusters){
# cat("Cluster",cl,"- size",length(ycurrent[which(clusters_now==cl)]),
# "- mean",mean(ycurrent[which(clusters_now==cl)]),"\n")
# }
################################################
df_cluster_cut = df_temp
# if you want to see results directly here, use these lines
# df_cluster_cut = df_cluster[df_cluster$Time==time,] # same def
# cols = ... defined above
# salso_out = salso_out_list[[time]]
# ssout = summary(salso_out)
# plot(ssout,type="heatmap")
# plot(ssout,type="mds")
# plot(ssout,type="pairs",data=std_sites)
# text(0.2,0.98,paste0("Time ",time))
# plot(ssout,type="dendrogram")
# q = get_graph_plot(df_cluster_cut,cols)
# print(q)
# p = plot_graph_and_hist(df_cluster_cut,cols)
################################################
# test for covariates plots
# png("test.png",units="px",height = 2400,width = 2000)
# p = Federica_covariates_plot(df_cluster_cut,cols,
# 				 titolo = paste("Cluster map, time",time,"- Gaussian PPMx"),var_selected_idxs)
# ggsave(p,file="test.png",units="px",width=3500, height=3000, dpi=400)
# ggsave(p,file="test.pdf",width=15, height=10)
# dev.off()
}
library(ppmSuite)
?curve_ppmx
library(ppmSuite)
library(tidyverse)
library(lubridate)
library(patchwork)
library(salso)
source("include.R")
source("plot functions/plotter.R")
source("include_clusters_functions.R")
cols = colora(10,"div")[-2] # divergent palette; togliamo il giallino
time_span = c(1:53)
sites = data.frame(
longitude = unique(df_weekly$Longitude),
latitude = unique(df_weekly$Latitude))
std_sites = data.frame(
longitude = unique(df_wsc$Longitude),
latitude = unique(df_wsc$Latitude))
stations = unique(df_wsc$IDStations)
y=data.frame()
for(st in stations){
y_we_pm10=cbind(as.data.frame(st),t(df_wsc[which(df_wsc$IDStations==st),"AQ_pm10"]))
y=rbind(y,y_we_pm10)
}
rownames(y) = NULL
colnames(y)<- c("id",paste0("w", 1:53))
df_wsc
y
plot(sites)
plot(std_sites)
# this y needs to not be overwritten
var_selected <- c("Altitude","EM_nox_sum","WE_mode_wind_direction_100m","WE_wind_speed_100m_max", "LA_lvi")
nobs <- 53 # number of week for each stations
nsubject <- length(unique(df_wsc$IDStations)) # number of station
# input data for the curve_PPmX function
y_fit = matrix(nrow = 0, ncol = nobs)
y_fit = df_wsc$AQ_pm10
dat <- data.frame(y_fit=c(y_fit),
z=rep(1:nobs, times=nsubject), # is the time
Name=rep(1:nsubject, each=nobs))
allXcons = list()
allXcats = list()
for (time in 1:53) {
allXcons[[time]] = data.frame(
Altitude = df_wsc$Altitude[seq(from=time, by = 53, length.out=105)],
EM_nox_sum = df_wsc$EM_nox_sum[seq(from=time, by = 53, length.out=105)],
WE_wind_speed_100m_max = df_wsc$WE_wind_speed_100m_max[seq(from=time, by = 53, length.out=105)],
LA_lvi = df_wsc$LA_lvi[seq(from=time, by = 53, length.out=105)]
)
allXcats[[time]] = data.frame(
WE_mode_wind_direction_100m = df_wsc$WE_mode_wind_direction_100m[seq(from=time, by = 53, length.out=105)]
)
}
subject_obs_vec <- dat$Name
y_fit <- dat$y_fit
z <- dat$z
nknots <- 20
# niter <- 20000
# nburn <- 10000
# nthin <- 10 # we consider every nthin iteartions
niter <- 10000
nburn <- 5000
nthin <- 5 # we consider every nthin iteartions
nout <- (niter-nburn)/nthin # the number of interatio that we coniser from the mcmc
cat("Getting",nout,"total iterations")
## the order here is c(mu0, s20, v, k0, nu0, a0, alpha)
## If simularity is N-NIG then k0 and nu0 are used but v is not
## If simularity is N-N then v is used but no k0 and nu0
simparms <- c(0.0, 1.0, 0.1, 1.0, 1.0, 0.1, 1) # WHAT IS THEIR MEANING IF WE DON'T USE COV
all_fits_test = list()
for (time in 1:2){
cat(crayon::red("##############\n"))
cat(crayon::red("Fitting time",time,"\n"))
cat(crayon::red("##############\n"))
fit_test <- curve_ppmx(y=cbind(y_fit), z=z,
subject=subject_obs_vec,
Xcon = allXcons[[time]],
Xcat = as.data.frame(apply(allXcats[[time]],2,mappa_direzioni)),
Xconp=NULL,
Xcatp=NULL,
PPM=FALSE,
M=1,
q=3,
rw_order=1,
balanced=1,
nknots=nknots,
npredobs=1,
Aparm=60,
similarity_function=1,
consim=1,
calibrate=0,
modelPriors=modelPriors,
simParms=simparms,
mh=c(0.2, 0.2),
draws=niter,
burn=nburn,
thin=nthin
)
all_fits[[time]] = fit_test
}
df <- data.frame(
DirezioneVento = c("N", "NE", "E", "SE", "S", "SW", "W", "NW")
)
# Definire un vettore di direzioni ordinate
direzioni_ordinate <- c("N", "NE", "E", "SE", "S", "SW", "W", "NW")
# Creare una funzione di mapping per assegnare i numeri
mappa_direzioni <- function(direzione) {
return(match(direzione, direzioni_ordinate) - 1)
}
all_fits_test = list()
for (time in 1:2){
cat(crayon::red("##############\n"))
cat(crayon::red("Fitting time",time,"\n"))
cat(crayon::red("##############\n"))
fit_test <- curve_ppmx(y=cbind(y_fit), z=z,
subject=subject_obs_vec,
Xcon = allXcons[[time]],
Xcat = as.data.frame(apply(allXcats[[time]],2,mappa_direzioni)),
Xconp=NULL,
Xcatp=NULL,
PPM=FALSE,
M=1,
q=3,
rw_order=1,
balanced=1,
nknots=nknots,
npredobs=1,
Aparm=60,
similarity_function=1,
consim=1,
calibrate=0,
modelPriors=modelPriors,
simParms=simparms,
mh=c(0.2, 0.2),
draws=niter,
burn=nburn,
thin=nthin
)
all_fits[[time]] = fit_test
}
modelPriors <- c(0.5, # Asig
100^2, # s2_mu
0, # mb0
1000^2, # s2b0
1, # as2b0
1, # bs2b0
1, # at
1.0/0.05) # bt
## the order here is c(mu0, s20, v, k0, nu0, a0, alpha)
## If simularity is N-NIG then k0 and nu0 are used but v is not
## If simularity is N-N then v is used but no k0 and nu0
simparms <- c(0.0, 1.0, 0.1, 1.0, 1.0, 0.1, 1) # WHAT IS THEIR MEANING IF WE DON'T USE COV
nknots <- 20
# niter <- 20000
# nburn <- 10000
# nthin <- 10 # we consider every nthin iteartions
niter <- 10000
nburn <- 5000
nthin <- 5 # we consider every nthin iteartions
nout <- (niter-nburn)/nthin # the number of interatio that we coniser from the mcmc
cat("Getting",nout,"total iterations")
all_fits_test = list()
for (time in 1:2){
cat(crayon::red("##############\n"))
cat(crayon::red("Fitting time",time,"\n"))
cat(crayon::red("##############\n"))
fit_test <- curve_ppmx(y=cbind(y_fit), z=z,
subject=subject_obs_vec,
Xcon = allXcons[[time]],
Xcat = as.data.frame(apply(allXcats[[time]],2,mappa_direzioni)),
Xconp=NULL,
Xcatp=NULL,
PPM=FALSE,
M=1,
q=3,
rw_order=1,
balanced=1,
nknots=nknots,
npredobs=1,
Aparm=60,
similarity_function=1,
consim=1,
calibrate=0,
modelPriors=modelPriors,
simParms=simparms,
mh=c(0.2, 0.2),
draws=niter,
burn=nburn,
thin=nthin
)
all_fits[[time]] = fit_test
}
all_fits_test = list()
for (time in 1:2){
cat(crayon::red("##############\n"))
cat(crayon::red("Fitting time",time,"\n"))
cat(crayon::red("##############\n"))
fit_test <- curve_ppmx(y=cbind(y_fit), z=z,
subject=subject_obs_vec,
Xcon = allXcons[[time]],
Xcat = as.data.frame(apply(allXcats[[time]],2,mappa_direzioni)),
Xconp=NULL,
Xcatp=NULL,
PPM=FALSE,
M=1,
q=3,
rw_order=1,
balanced=1,
nknots=nknots,
npredobs=1,
Aparm=60,
similarity_function=1,
consim=1,
calibrate=0,
modelPriors=modelPriors,
simParms=simparms,
mh=c(0.2, 0.2),
draws=niter,
burn=nburn,
thin=nthin
)
all_fits_test[[time]] = fit_test
}
all_fits_test[[1]]
all_fits_test[[1]]$lpml
all_fits_test[[1]]$WAIC
all_fits_test[[2]]$WAIC
all_fits_test[[2]]$llpml
all_fits_test[[2]]$lpml
all_fits_test_2 = list()
for (time in 1:2){
cat(crayon::red("##############\n"))
cat(crayon::red("Fitting time",time,"\n"))
cat(crayon::red("##############\n"))
fit_test2 <- curve_ppmx(y=cbind(y_fit), z=z,
subject=subject_obs_vec,
Xcon = allXcons[[time]],
Xcat = as.data.frame(apply(allXcats[[time]],2,mappa_direzioni)),
Xconp=NULL,
Xcatp=NULL,
PPM=FALSE,
M=1,
q=3,
rw_order=1,
balanced=1,
nknots=40,
npredobs=1,
Aparm=60,
similarity_function=1,
consim=1,
calibrate=0,
modelPriors=modelPriors,
simParms=simparms,
mh=c(0.2, 0.2),
draws=niter,
burn=nburn,
thin=nthin
)
all_fits_test2[[time]] = fit_test2
}
all_fits_test2 = list()
for (time in 1:2){
cat(crayon::red("##############\n"))
cat(crayon::red("Fitting time",time,"\n"))
cat(crayon::red("##############\n"))
fit_test2 <- curve_ppmx(y=cbind(y_fit), z=z,
subject=subject_obs_vec,
Xcon = allXcons[[time]],
Xcat = as.data.frame(apply(allXcats[[time]],2,mappa_direzioni)),
Xconp=NULL,
Xcatp=NULL,
PPM=FALSE,
M=1,
q=3,
rw_order=1,
balanced=1,
nknots=40,
npredobs=1,
Aparm=60,
similarity_function=1,
consim=1,
calibrate=0,
modelPriors=modelPriors,
simParms=simparms,
mh=c(0.2, 0.2),
draws=niter,
burn=nburn,
thin=nthin
)
all_fits_test2[[time]] = fit_test2
}
all_fits_test2[[1]]$lpml
all_fits_test2[[1]]$WAIC
all_fits_test[[1]]$lpml
all_fits_test[[1]]$
Waic
all_fits_test[[1]]$WAIC
all_fits_test[[2]]$lpml
all_fits_test[[2]]$WAIC
all_fits_test1[[1]]$lpml
all_fits_test2[[1]]$lpml
all_fits_test2[[2]]$lpml
all_fits_test2[[1]]$lpml
all_fits_test2[[2]]$WAIC
all_fits_test[[1]]$lpml
all_fits_test[[1]]$WAIC
all_fits_test[[2]]$lpml
all_fits_test[[2]]$WAIC
all_fits_test2[[1]]$lpml
all_fits_test2[[1]]$WAIC
all_fits_test2[[2]]$lpml
all_fits_test2[[2]]$WAIC
all_fits_test = list()
for (time in 1:2){
cat(crayon::red("##############\n"))
cat(crayon::red("Fitting time",time,"\n"))
cat(crayon::red("##############\n"))
fit_test <- curve_ppmx(y=cbind(y_fit), z=z,
subject=subject_obs_vec,
Xcon = allXcons[[time]],
Xcat = as.data.frame(apply(allXcats[[time]],2,mappa_direzioni)),
Xconp=NULL,
Xcatp=NULL,
PPM=FALSE,
M=0.1,
q=3,
rw_order=1,
balanced=1,
nknots=nknots,
npredobs=1,
Aparm=60,
similarity_function=1,
consim=1,
calibrate=0,
modelPriors=modelPriors,
simParms=simparms,
mh=c(0.2, 0.2),
draws=niter,
burn=nburn,
thin=nthin
)
all_fits_test[[time]] = fit_test
}
all_fits_test2 = list()
for (time in 1:2){
cat(crayon::red("##############\n"))
cat(crayon::red("Fitting time",time,"\n"))
cat(crayon::red("##############\n"))
fit_test2 <- curve_ppmx(y=cbind(y_fit), z=z,
subject=subject_obs_vec,
Xcon = allXcons[[time]],
Xcat = as.data.frame(apply(allXcats[[time]],2,mappa_direzioni)),
Xconp=NULL,
Xcatp=NULL,
PPM=FALSE,
M=0.1,
q=3,
rw_order=1,
balanced=1,
nknots=40,
npredobs=1,
Aparm=60,
similarity_function=1,
consim=1,
calibrate=0,
modelPriors=modelPriors,
simParms=simparms,
mh=c(0.2, 0.2),
draws=niter,
burn=nburn,
thin=nthin
)
all_fits_test2[[time]] = fit_test2
}
# M = 0.1
all_fits_test[[1]]$lpml
all_fits_test[[1]]$WAIC
all_fits_test[[2]]$lpml
all_fits_test[[2]]$WAIC
# M = 0.1
all_fits_test2[[1]]$lpml
all_fits_test2[[1]]$WAIC
all_fits_test2[[2]]$lpml
all_fits_test2[[2]]$WAIC
all_fits_test = list()
for (time in 1:2){
cat(crayon::red("##############\n"))
cat(crayon::red("Fitting time",time,"\n"))
cat(crayon::red("##############\n"))
fit_test <- curve_ppmx(y=cbind(y_fit), z=z,
subject=subject_obs_vec,
Xcon = allXcons[[time]],
Xcat = as.data.frame(apply(allXcats[[time]],2,mappa_direzioni)),
Xconp=NULL,
Xcatp=NULL,
PPM=FALSE,
M=10,
q=3,
rw_order=1,
balanced=1,
nknots=nknots,
npredobs=1,
Aparm=60,
similarity_function=1,
consim=1,
calibrate=0,
modelPriors=modelPriors,
simParms=simparms,
mh=c(0.2, 0.2),
draws=niter,
burn=nburn,
thin=nthin
)
all_fits_test[[time]] = fit_test
}
all_fits_test2 = list()
for (time in 1:2){
cat(crayon::red("##############\n"))
cat(crayon::red("Fitting time",time,"\n"))
cat(crayon::red("##############\n"))
fit_test2 <- curve_ppmx(y=cbind(y_fit), z=z,
subject=subject_obs_vec,
Xcon = allXcons[[time]],
Xcat = as.data.frame(apply(allXcats[[time]],2,mappa_direzioni)),
Xconp=NULL,
Xcatp=NULL,
PPM=FALSE,
M=10,
q=3,
rw_order=1,
balanced=1,
nknots=40,
npredobs=1,
Aparm=60,
similarity_function=1,
consim=1,
calibrate=0,
modelPriors=modelPriors,
simParms=simparms,
mh=c(0.2, 0.2),
draws=niter,
burn=nburn,
thin=nthin
)
all_fits_test2[[time]] = fit_test2
}
# M = 10
all_fits_test[[1]]$lpml
all_fits_test[[1]]$WAIC
all_fits_test[[2]]$lpml
all_fits_test[[2]]$WAIC
# M = 10
all_fits_test2[[1]]$lpml
all_fits_test2[[1]]$WAIC
all_fits_test2[[2]]$lpml
all_fits_test2[[2]]$WAIC
