scale_color_manual(values = cols) +
theme(legend.position = "top")+
theme_classic()
print(time_trend)
chosen_station = 1
initial_date = "2016-01-01"
final_date = "2021-12-31"
file_name = "time_trend"
st = stations[chosen_station]
df_st = df_stat[[st]]
stations = unique(df_agri$IDStations)
cols = colora(6,970,show=F)
###
date_time = as.Date(seq.Date(from=as.Date(initial_date,DATE_FORMAT),
to=as.Date(final_date,DATE_FORMAT),by="day"))
data_form_to = df_st[which(as.Date(df_st$Time) %in% date_time),]
###
data_form_to$month_day = as.Date(paste0("1990-",substr(data_form_to$Time,6,10)))
data_form_to$t = format(data_form_to$Time,"%j")
# Crea il grafico ggplot
time_trend <- ggplot(data_form_to,aes(x = month_day,
y = AQ_pm10,
group=year(Time),
color = as.factor(year(Time)))) +
geom_line() +
labs(x = "Year", y = "PM_10 values", title = paste0("Station ", st, ", all years")) +
ylim(range(na.omit(data_form_to$AQ_pm10))) +
scale_x_date(date_labels = "%b",date_breaks = "1 month")+
scale_color_manual(values = cols) +
theme(legend.position = "top")+
guides(color = guide_legend(title = "Years"))+
theme_bw()+
theme(panel.grid = element_blank())
print(time_trend)
data_form_to
chosen_station = 1
initial_date = "2016-01-01"
final_date = "2021-12-31"
file_name = "time_trend"
chosen_variable_name = "AQ_pm10"
st = stations[chosen_station]
df_st = df_stat[[st]]
stations = unique(df_agri$IDStations)
cols = colora(6,970,show=F)
###
date_time = as.Date(seq.Date(from=as.Date(initial_date,DATE_FORMAT),
to=as.Date(final_date,DATE_FORMAT),by="day"))
data_form_to = df_st[which(as.Date(df_st$Time) %in% date_time),]
###
data_form_to$month_day = as.Date(paste0("1990-",substr(data_form_to$Time,6,10)))
data_form_to$t = format(data_form_to$Time,"%j")
chosen_variable = data_form_to[,chosen_variable_name]
# Crea il grafico ggplot
time_trend <- ggplot(data_form_to,aes(x = month_day,
y = chosen_variable,
group=year(Time),
color = as.factor(year(Time)))) +
geom_line() +
labs(x = "Year", y = chosen_variable_name, title = paste0("Station ", st, ", all years")) +
ylim(range(na.omit(chosen_variable))) +
scale_x_date(date_labels = "%b",date_breaks = "1 month")+
scale_color_manual(values = cols) +
theme(legend.position = "top")+
guides(color = guide_legend(title = "Years"))+
theme_bw()+
theme(panel.grid = element_blank())
print(time_trend)
source("plot functions/plot_functions.R")
source("include.R")
chosen_station = 1
initial_date = "2016-01-01"
final_date = "2021-12-31"
file_name = "time_trend"
chosen_variable_name = "AQ_pm10"
trendStationYear_plot = trendStationYear(chosen_station,initial_date,final_date,file_name,chosen_variable_name)
time_trend <- time_trend + transition_reveal(as.numeric(t)) + geom_point() + view_follow(fixed_x = T,fixed_y = T)
mappa_animata <- animate(time_trend, duration = length(date_time), fps = 10, renderer = av_renderer())
output_file <- paste0("./gifs/",file_name,".mp4")
anim_save(output_file,mappa_animata,duration = length(date_time),fps = 10, renderer = av_renderer())
initial_date = "2016-01-01"
final_date = "2016-12-31"
chosen_stations = 1:4
file_name = "station_trend"
chosen_variable_name = "AQ_pm10"
trendYearStation_plot <- trendYearStation(initial_date,final_date,chosen_stations,file_name,chosen_variable_name)
head(df_agri)
var1_name = "AQ_no2"
var2_name = "WE_wind_speed_100m_mean"
# you can change size to refer to a particular variable
size_name = "LI_bovine"
colors_factor_name = "IDStations"
xyplot <- xyPlot(initial_date,final_date,every,file_name,var1_name,var2_name,size_name,colors_factor_name)
source("plot functions/plot_functions.R")
source("include.R")
var1_name = "AQ_no2"
var2_name = "WE_wind_speed_100m_mean"
# you can change size to refer to a particular variable
size_name = "LI_bovine"
colors_factor_name = "IDStations"
xyplot <- xyPlot(initial_date,final_date,every,file_name,var1_name,var2_name,size_name,colors_factor_name)
source("plot functions/plot_functions.R")
source("include.R")
var1_name = "AQ_no2"
var2_name = "WE_wind_speed_100m_mean"
# you can change size to refer to a particular variable
size_name = "LI_bovine"
colors_factor_name = "IDStations"
xyplot <- xyPlot(initial_date,final_date,every,file_name,var1_name,var2_name,size_name,colors_factor_name)
DATE_FORMAT
df_agri_time = filter_date(df_agri,initial_date,final_date,every)
df_agri_time$Time = as.Date(df_agri_time$Time )
var1 = df_agri_time[,var1_name]
var2 = df_agri_time[,var2_name]
if(class(size_name)!="numeric"){
size = df_agri_time[,size_name]
}else{
size = size_name
}
class(size_name)
colors_factor = df_agri_time[,colors_factor_name]
p <- ggplot(
df_agri_time,
aes(x = var1, y=var2, size = size, colour = colors_factor)) +
geom_point(alpha = 0.7) +
guides(size = guide_legend(), color = "none")+
scale_color_viridis_d() +
scale_size(range = c(2, 12)) +
labs(x = var1_name, y =var2_name)+
theme_bw()
p
if (file_name == "None"){
p <- p +facet_wrap(~Time)
print(p)
return(p)
} else {
mappa_animata <- p+ transition_time(Time) +
ggtitle(Time) +
labs(paste0(every,": {frame_time}"))+
shadow_wake(wake_length = 0.1, alpha = FALSE)
output_file <- paste0("./gifs/",file_name,".mp4")
anim_save(output_file,mappa_animata,duration = length(date_time),fps = 10, renderer = av_renderer())
}
if (file_name == "None"){
p <- p +facet_wrap(~Time)
print(p)
return(p)
} else {
mappa_animata <- p+ transition_time(df_agri_time$Time) +
ggtitle(Time) +
labs(paste0(every,": {frame_time}"))+
shadow_wake(wake_length = 0.1, alpha = FALSE)
output_file <- paste0("./gifs/",file_name,".mp4")
anim_save(output_file,mappa_animata,duration = length(date_time),fps = 10, renderer = av_renderer())
}
df_agri_time$Time
if (file_name == "None"){
p <- p +facet_wrap(~Time)
print(p)
return(p)
} else {
mappa_animata <- p+ transition_time(df_agri_time$Time) +
ggtitle(df_agri_time$Time) +
labs(paste0(every,": {frame_time}"))+
shadow_wake(wake_length = 0.1, alpha = FALSE)
output_file <- paste0("./gifs/",file_name,".mp4")
anim_save(output_file,mappa_animata,duration = length(date_time),fps = 10, renderer = av_renderer())
}
load("../data/data_agc_lomb.Rdata")
getwd()
setwd("./src/")
load("../data/data_agc_lomb.Rdata")
size(AGC_Dataset)
dim(AGC_Dataset)
1923831 /2
nrow(AGC_Dataset)
# Dividi il dataset in due parti
parte1 <- AGC_Dataset[1:961915, ]  # Esempio: le prime 1000 righe
parte2 <- AGC_Dataset[961916:nrow(AGC_Dataset), ]  # Il resto delle righe
# Salva le due parti in file RData separati
save(parte1, file = "../data/data_agc_lomb_part1.RData")
save(parte2, file = "../data/data_agc_lomb_part2.RData")
rm(list=ls())
##### OLD
# load("../data/data_agc_lomb.Rdata")
##### NEW
load("../../data/data_agc_lomb_part1.RData")
##### OLD
# load("../data/data_agc_lomb.Rdata")
##### NEW
load("../data/data_agc_lomb_part1.RData")
load("../data_agc_lomb_part2.RData")
load("../data/data_agc_lomb_part2.RData")
AGC_Dataset = rbind(parte1, parte2)
source("include.R")
source("plot functions/plot_functions.R")
rm(part1)
rm(parte1)
rm(parte2)
stationPlot <- stationPlot()
head(data_agc_lomb)
initial_date = "2016-01-01"
final_date = "2016-01-01"
every = "month"
# if you change the file_name from None it will create a mp4 video
file_name = "None"
chosen_variable_name = "WE_wind_speed_10m_max"
color_low =  "yellow"
color_high = "blue"
map = gridMap(initial_date,final_date,every,file_name,color_low,color_high,chosen_variable_name)
chosen_variable = data_from_to[,chosen_variable_name]
filter_date_list = filter_date(data_agc_lomb,initial_date,final_date,every)
data_from_to = filter_date_list[[1]]
len_time = filter_date_list[[2]]
chosen_variable = data_from_to[,chosen_variable_name]
chosen_variable
grid <- ggplot() +
geom_hline( yintercept = data_from_to$Latitude, color = "black", size = 0.1) +  # Linee orizzontali
geom_vline(xintercept = data_from_to$Longitude, color = "black", size = 0.1)  # Linee verticali
grid <- ggplot() +
geom_hline( yintercept = data_from_to$Latitude, color = "black", size = 0.1) +  # Linee orizzontali
geom_vline(xintercept = data_from_to$Longitude, color = "black", size = 0.1)  # Linee verticali
gradient_map <-
grid+
geom_tile(data = data_from_to, aes(x = Longitude, y = Latitude, fill = chosen_variable),
colour = "grey50",width = 1, height = 1,alpha = 1) +
scale_fill_gradient(low = color_low, high = color_high,na.value = "gray")
grid <- ggplot() +
geom_hline( yintercept = data_from_to$Latitude, color = "black", size = 0.1) +  # Linee orizzontali
geom_vline(xintercept = data_from_to$Longitude, color = "black", size = 0.1)  # Linee verticali
gradient_map <-
grid+
geom_tile(data = data_from_to, aes(x = Longitude, y = Latitude, fill = chosen_variable),
colour = "grey50",width = 1, height = 1,alpha = 1) +
scale_fill_gradient(low = color_low, high = color_high,na.value = "gray")
gradient_map <- gradient_map +facet_wrap(~Time)
print(gradient_map)
grid <- ggplot() +
geom_hline( yintercept = data_from_to$Latitude, color = "black", size = 0.1) +  # Linee orizzontali
geom_vline(xintercept = data_from_to$Longitude, color = "black", size = 0.1)  # Linee verticali
gradient_map <-
grid+
geom_tile(data = data_from_to, aes(x = Longitude, y = Latitude, fill = chosen_variable),
colour = "grey50",width = 1, height = 1,alpha = 1) +
scale_fill_gradient(low = color_low, high = color_high,na.value = "gray")
gradient_map <- gradient_map +facet_wrap(~Time)
print(gradient_map)
gradient_map
gradient_map <- gradient_map +facet_wrap(Time)
gradient_map <- gradient_map +facet_wrap(~Time)
typeof(gradient_map)
print(gradient_map[[1]])
print(gradient_map[[2]])
+facet_wrap(~Time)
facet_wrap(~Time)
~Time
print(gradient_map)
~Timecolnam
colnames(df_agc_lombardia)
colnames(data_agc_lomb)
initial_date = "2016-01-01"
final_date = "2016-01-01"
every = "month"
# if you change the file_name from None it will create a mp4 video
file_name = "None"
# chosen_variable_name = "WE_wind_speed_10m_max"
chosen_variable_name = "Altitude"
color_low =  "yellow"
color_high = "blue"
map = gridMap(initial_date,final_date,every,file_name,color_low,color_high,chosen_variable_name)
sum(is.na(data_agc_lomb$Altitude))
sum(is.na(data_agc_lomb$WE_wind_speed_10m_max))
is.na(data_agc_lomb$Altitude)
as.numeric(is.na(data_agc_lomb$Altitude))
sum(as.numeric(is.na(data_agc_lomb$Altitude)))
as.numeric(is.na(data_agc_lomb$WE_wind_speed_10m_max))
typeof(data_agc_lomb$WE_wind_speed_10m_max)
head(data_agc_lomb$WE_wind_speed_10m_max)
data_agc_lomb$WE_wind_speed_10m_max = as.numeric(data_agc_lomb$WE_wind_speed_10m_max)
head(data_agc_lomb$WE_wind_speed_10m_max)
initial_date = "2016-01-01"
final_date = "2016-01-01"
every = "month"
# if you change the file_name from None it will create a mp4 video
file_name = "None"
data_agc_lomb$WE_wind_speed_10m_max = as.numeric(data_agc_lomb$WE_wind_speed_10m_max)
chosen_variable_name = "WE_wind_speed_10m_max"
# chosen_variable_name = "Altitude"
color_low =  "yellow"
color_high = "blue"
map = gridMap(initial_date,final_date,every,file_name,color_low,color_high,chosen_variable_name)
source("include.R")
hist(log(Y))
Y = df_agri$AQ_pm10
par(mfrow=c(1,2))
hist(Y)
hist(log(Y))
ggplot(data = data.frame(Y = Y), aes(x = Y)) +
geom_histogram(binwidth = 5, fill = "skyblue", color = "black", alpha = 0.7) +
labs(title = "Istogramma di AQ_pm10", x = "AQ_pm10", y = "Frequenza") +
theme_minimal()
# Istogramma del logaritmo della variabile
ggplot(data = data.frame(log_Y = log(Y)), aes(x = log_Y)) +
geom_histogram(binwidth = 0.2, fill = "lightgreen", color = "black", alpha = 0.7) +
labs(title = "Istogramma del Logaritmo di AQ_pm10", x = "Log(AQ_pm10)", y = "Frequenza") +
theme_minimal()
ln = log
ggplot(data = data.frame(Y = Y), aes(x = Y)) +
geom_histogram(binwidth = 5, fill = "skyblue", color = "black", alpha = 0.7) +
labs(title = "Istogramma di AQ_pm10", x = "AQ_pm10", y = "Frequenza") +
theme_minimal()
# Istogramma del logaritmo della variabile
ggplot(data = data.frame(log_Y = log(Y)), aes(x = log_Y)) +
geom_histogram(binwidth = 0.2, fill = "lightgreen", color = "black", alpha = 0.7) +
labs(title = "Istogramma del Logaritmo di AQ_pm10", x = "Log(AQ_pm10)", y = "Frequenza") +
theme_minimal()
cols=colora(2,345)
hist(log(Y),col=cols[2])
Y = df_agri$AQ_pm10
par(mfrow=c(1,2))
cols=colora(2,345)
hist(Y,col=cols[1])
hist(log(Y),col=cols[2])
cols=colora(2,345)
Y = df_agri$AQ_pm10
par(mfrow=c(1,2))
hist(Y,col=cols[1])
hist(log(Y),col=cols[2])
par(mfrow=c(1,2),mar=c(1,1,1,1))
cols=colora(2,345)
Y = df_agri$AQ_pm10
par(mfrow=c(1,2),mar=c(1,1,1,1))
hist(Y,col=cols[1])
hist(log(Y),col=cols[2])
cols=colora(2,345)
Y = df_agri$AQ_pm10
par(mfrow=c(1,2),mar=c(2,2,2,2))
hist(Y,col=cols[1])
hist(log(Y),col=cols[2])
cols=colora(2,345)
Y = df_agri$AQ_pm10
par(mfrow=c(1,2),mar=c(2,2,2,2))
hist(Y,col=cols[1],probability = T)
hist(log(Y),col=cols[2],probability = T)
ggplot(df, aes(x = Y, fill = "Original")) +
geom_histogram(binwidth = 5, alpha = 0.7, position = "identity") +
geom_histogram(data = df, aes(x = log_Y, fill = "Logarithm"), binwidth = 0.2, alpha = 0.7, position = "identity") +
labs(title = "Confronto Istogramma di AQ_pm10 e del suo Logaritmo", x = "Valore", y = "Frequenza", fill = "Tipo") +
scale_fill_manual(values = c("Original" = "skyblue", "Logarithm" = "lightgreen")) +
theme_minimal()
ggplot(df_agri, aes(x = AQ_pm10, fill = "Original")) +
geom_histogram(binwidth = 5, alpha = 0.7, position = "identity") +
geom_histogram(data = df, aes(x = log_Y, fill = "Logarithm"), binwidth = 0.2, alpha = 0.7, position = "identity") +
labs(title = "Confronto Istogramma di AQ_pm10 e del suo Logaritmo", x = "Valore", y = "Frequenza", fill = "Tipo") +
scale_fill_manual(values = c("Original" = "skyblue", "Logarithm" = "lightgreen")) +
theme_minimal()
ggplot(df_agri, aes(x = Y, fill = "Original")) +
geom_histogram(binwidth = 5, alpha = 0.7, position = "identity") +
geom_histogram(data = df_agri, aes(x = log(Y), fill = "Logarithm"), binwidth = 0.2, alpha = 0.7, position = "identity") +
labs(title = "Confronto Istogramma di AQ_pm10 e del suo Logaritmo", x = "Valore", y = "Frequenza", fill = "Tipo") +
scale_fill_manual(values = c("Original" = "skyblue", "Logarithm" = "lightgreen")) +
theme_minimal()
cols=colora(2,34)
Y = df_agri$AQ_pm10
par(mfrow=c(1,2),mar=c(2,2,2,2))
hist(Y,col=cols[1],probability = T)
hist(log(Y),col=cols[2],probability = T)
cols=colora(2,3)
Y = df_agri$AQ_pm10
par(mfrow=c(1,2),mar=c(2,2,2,2))
hist(Y,col=cols[1],probability = T)
hist(log(Y),col=cols[2],probability = T)
cols=colora(2,rand())
cols=colora(2,24)
Y = df_agri$AQ_pm10
par(mfrow=c(1,2),mar=c(2,2,2,2))
hist(Y,col=cols[1],probability = T)
hist(log(Y),col=cols[2],probability = T)
cols=colora(2,244)
Y = df_agri$AQ_pm10
par(mfrow=c(1,2),mar=c(2,2,2,2))
hist(Y,col=cols[1],probability = T)
hist(log(Y),col=cols[2],probability = T)
cols=colora(2,24)
cols=colora(2,25)
cols=colora(2,26)
for (i in 10:20){
cols=colora(2,i)
}
?image
for (i in 10:20){
cols=colora(2,i)
title(main="1")
}
for (i in 10:20){
cols=colora(2,i)
title(main=i)
}
cols = colora(2,15)
Y = df_agri$AQ_pm10
par(mfrow=c(1,2),mar=c(2,2,2,2))
hist(Y,col=cols[1],probability = T)
hist(log(Y),col=cols[2],probability = T)
cols = colora(2,15)
pm10 = df_agri$AQ_pm10
par(mfrow=c(1,2),mar=c(2,2,2,2))
hist(Y,col=cols[1],probability = T)
hist(log(Y),col=cols[2],probability = T)
cols = colora(2,15)
pm10 = df_agri$AQ_pm10
par(mfrow=c(1,2),mar=c(2,2,2,2))
hist(pm10,col=cols[1],probability = T)
hist(log(pm10),col=cols[2],probability = T)
cols = colora(2,15)
pm10 = df_agri$AQ_pm10
par(mfrow=c(1,2),mar=c(2,2,2,2))
hist(pm10,col=cols[1],probability = T)
hist(log(pm10),col=cols[2],probability = T,xlim=c(-1,6))
########################
# function to get colors for plotting
########################
fun_colori = function(len=2, seed=33, show=1){
hcols_ = hcl.pals()
col.ramp_ = hcl.colors(len,palette=hcols_[seed%%115+1])
if(show==1){
dati_ <- matrix(1:100, ncol = 1)
image(dati_, col = col.ramp_, axes = FALSE)
title(main=seed)
}
return(col.ramp_)
}
cols = colora(2,15)
cols = colora(2,15)
pm10 = df_agri$AQ_pm10
par(mfrow=c(1,2),mar=c(2,2,2,2))
hist(pm10,col=cols[1],probability = T)
hist(log(pm10),col=cols[2],probability = T,xlim=c(-1,6))
str(2)
as.character(244)
########################
# function to get colors for plotting
########################
fun_colori = function(len=2, seed=33, show=1){
hcols_ = hcl.pals()
col.ramp_ = hcl.colors(len,palette=hcols_[seed%%115+1])
if(show==1){
dati_ <- matrix(1:100, ncol = 1)
image(dati_, col = col.ramp_, axes = FALSE)
title(main=as.character(seed))
}
return(col.ramp_)
}
########################
# function to get colors for plotting
########################
fun_colori = function(len=2, seed=33, show=1){
hcols_ = hcl.pals()
col.ramp_ = hcl.colors(len,palette=hcols_[seed%%115+1])
if(show==1){
dati_ <- matrix(1:100, ncol = 1)
image(dati_, col = col.ramp_, axes = FALSE)
title(main=as.character(seed))
}
return(col.ramp_)
}
colori_fun = colorami = colora = fun_colori # aliases
cols = colora(2,15)
########################
# function to get colors for plotting
########################
fun_colori = function(len=2, seed=33, show=1){
hcols_ = hcl.pals()
col.ramp_ = hcl.colors(len,palette=hcols_[seed%%115+1])
if(show==1){
dati_ <- matrix(1:100, ncol = 1)
image(dati_, col = col.ramp_, axes = FALSE)
title(main=seed)
}
return(col.ramp_)
}
colori_fun = colorami = colora = fun_colori # aliases
cols = colora(2,15)
cols = colora(2,15)
pm10 = df_agri$AQ_pm10
par(mfrow=c(1,2),mar=c(2,2,2,2))
hist(pm10,col=cols[1],probability = T)
hist(log(pm10),col=cols[2],probability = T,xlim=c(-1,6))
cols = colora(6,15)
cols = colora(2,15)
pm10 = df_agri$AQ_pm10
par(mfrow=c(1,2),mar=c(2,2,2,2))
hist(pm10,col=cols[1],probability = T)
hist(log(pm10),col=cols[2],probability = T,xlim=c(-1,6))
cols = colora(2,15)
pm10 = df_agri$AQ_pm10
par(mfrow=c(1,2),mar=c(2,2,2,2))
hist(pm10,col=cols[1],probability = T)
hist(log(pm10),col=cols[2],probability = T,xlim=c(-1,6))
qqplot(log(pm10))
qqline(log(pm10))
qqline(log(pm10))
qqnorm(log(pm10))
shapiro.test(log(pm10))
shapiro.test(log(pm10)[1:5000])
shapiro.test(na.omit(log(pm10))[1:5000])
shapiro.test(na.omit(log(pm10))[1:5000])
na.omit(log(pm10))
shapiro.test(na.omit(log(pm10))[1:1000])
cols = colora(2,15)
pm10 = df_agri$AQ_pm10
par(mfrow=c(1,2),mar=c(2,2,2,2))
hist(pm10,col=cols[1],probability = T)
hist(log(pm10),col=cols[2],probability = T,xlim=c(-1,6))
