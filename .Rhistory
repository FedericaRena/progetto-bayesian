return(trend_animator(file_name,station_trend, data_from_to$week,len_time))
}
trendYearStation_week("None")
# time = 1
for(time in 1:10){
salso_out <- salso(t(drpm1$Si[time,,]),loss="binder")
n_clusters = max(salso_out)
cat(crayon::cyan("Time",time,"\n"))
for (cl in 1:n_clusters){
cat("Cluster",cl,"- size",length(y$w1[which(salso_out==cl)]),
"- mean",mean(y$w1[which(salso_out==cl)]),"\n")
}
# ci sta, sembrano abbastanza diverse
# ora creiamo un dataset che ha (105 righe e) due colonne: i valori di pm10, e il cluster assegnato
clust_vals = list()
for(cl in 1:n_clusters){
clust_vals[[cl]] <- data.frame(values = y$w1[which(salso_out==cl)])
clust_vals[[cl]]$cluster = as.factor(cl)
}
valori = clust_vals[[1]]
for(cl in 2:n_clusters){
valori = rbind(valori, clust_vals[[cl]])
}
# per ora stiamo lavorando sui valori del dataset,
# ma dobbiamo ricordarci che li dobbiamo log-trasformare in realtà
# p = ggplot(valori, aes(log(values), fill = cluster)) +
p = ggplot(valori, aes(values, fill = cluster)) +
# scale_color_discrete(name = "cluster")+
# scale_fill_brewer(type="div",palette=4)+
scale_fill_manual(values = colora(n_clusters,77,0),name="Cluster")+
geom_density(alpha = 0.4)+
ggtitle(paste("Time",time))+
xlim(extrema(valori$values)+c(-10,10))+
theme_classic()
print(p)
} # end for(time in eccc)
y
salso_out
# time = 1
for(time in 1:10){
salso_out <- salso(t(drpm1$Si[time,,]),loss="binder")
n_clusters = max(salso_out)
ycurrent = y[,paste0("w",time)]
cat(crayon::cyan("Time",time,"\n"))
for (cl in 1:n_clusters){
cat("Cluster",cl,"- size",length(ycurrent[which(salso_out==cl)]),
"- mean",mean(ycurrent[which(salso_out==cl)]),"\n")
}
# ci sta, sembrano abbastanza diverse
# ora creiamo un dataset che ha (105 righe e) due colonne: i valori di pm10, e il cluster assegnato
clust_vals = salso_out[1:105]
valori = y
# per ora stiamo lavorando sui valori del dataset,
# ma dobbiamo ricordarci che li dobbiamo log-trasformare in realtà
# p = ggplot(ycurrent, aes(log(ycurrent), fill = cluster)) +
p = ggplot(ycurrent, aes(ycurrent, fill = cluster)) +
# scale_color_discrete(name = "cluster")+
# scale_fill_brewer(type="div",palette=4)+
scale_fill_manual(values = colora(n_clusters,77,0),name="Cluster")+
geom_density(alpha = 0.4)+
ggtitle(paste("Time",time))+
xlim(extrema(ycurrent)+c(-10,10))+
theme_classic()
print(p)
} # end for(time in eccc)
# time = 1
for(time in 1:10){
salso_out <- salso(t(drpm1$Si[time,,]),loss="binder")
n_clusters = max(salso_out)
ycurrent = y[,paste0("w",time)]
cat(crayon::cyan("Time",time,"\n"))
for (cl in 1:n_clusters){
cat("Cluster",cl,"- size",length(ycurrent[which(salso_out==cl)]),
"- mean",mean(ycurrent[which(salso_out==cl)]),"\n")
}
# ci sta, sembrano abbastanza diverse
# ora creiamo un dataset che ha (105 righe e) due colonne: i valori di pm10, e il cluster assegnato
clust_vals = salso_out[1:105]
# per ora stiamo lavorando sui valori del dataset,
# ma dobbiamo ricordarci che li dobbiamo log-trasformare in realtà
# p = ggplot(ycurrent, aes(log(ycurrent), fill = cluster)) +
p = ggplot(ycurrent, aes(ycurrent, fill = cluster)) +
# scale_color_discrete(name = "cluster")+
# scale_fill_brewer(type="div",palette=4)+
scale_fill_manual(values = colora(n_clusters,77,0),name="Cluster")+
geom_density(alpha = 0.4)+
ggtitle(paste("Time",time))+
xlim(extrema(ycurrent)+c(-10,10))+
theme_classic()
print(p)
} # end for(time in eccc)
valori
valori
# time = 1
for(time in 1:10){
salso_out <- salso(t(drpm1$Si[time,,]),loss="binder")
n_clusters = max(salso_out)
cat(crayon::cyan("Time",time,"\n"))
for (cl in 1:n_clusters){
cat("Cluster",cl,"- size",length(y$w1[which(salso_out==cl)]),
"- mean",mean(y$w1[which(salso_out==cl)]),"\n")
}
# ci sta, sembrano abbastanza diverse
# ora creiamo un dataset che ha (105 righe e) due colonne: i valori di pm10, e il cluster assegnato
clust_vals = list()
for(cl in 1:n_clusters){
clust_vals[[cl]] <- data.frame(values = y$w1[which(salso_out==cl)])
clust_vals[[cl]]$cluster = as.factor(cl)
}
valori = clust_vals[[1]]
for(cl in 2:n_clusters){
valori = rbind(valori, clust_vals[[cl]])
}
# per ora stiamo lavorando sui valori del dataset,
# ma dobbiamo ricordarci che li dobbiamo log-trasformare in realtà
# p = ggplot(valori, aes(log(values), fill = cluster)) +
p = ggplot(valori, aes(values, fill = cluster)) +
# scale_color_discrete(name = "cluster")+
# scale_fill_brewer(type="div",palette=4)+
scale_fill_manual(values = colora(n_clusters,77,0),name="Cluster")+
geom_density(alpha = 0.4)+
ggtitle(paste("Time",time))+
xlim(extrema(valori$values)+c(-10,10))+
theme_classic()
print(p)
} # end for(time in eccc)
# time = 1
for(time in 1:10){
salso_out <- salso(t(drpm1$Si[time,,]),loss="binder")
n_clusters = max(salso_out)
ycurrent = y[,paste0("w",time)]
cat(crayon::cyan("Time",time,"\n"))
for (cl in 1:n_clusters){
cat("Cluster",cl,"- size",length(ycurrent[which(salso_out==cl)]),
"- mean",mean(ycurrent[which(salso_out==cl)]),"\n")
}
# ci sta, sembrano abbastanza diverse
# ora creiamo un dataset che ha (105 righe e) due colonne: i valori di pm10, e il cluster assegnato
clust_vals = salso_out[1:105]
df_temp = cbind(clust_vals,ycurrent)
# per ora stiamo lavorando sui valori del dataset,
# ma dobbiamo ricordarci che li dobbiamo log-trasformare in realtà
# p = ggplot(df_temp, aes(log(ycurrent), fill = cluster)) +
p = ggplot(df_temp, aes(ycurrent, fill = cluster)) +
# scale_color_discrete(name = "cluster")+
# scale_fill_brewer(type="div",palette=4)+
scale_fill_manual(values = colora(n_clusters,77,0),name="Cluster")+
geom_density(alpha = 0.4)+
ggtitle(paste("Time",time))+
xlim(extrema(ycurrent)+c(-10,10))+
theme_classic()
print(p)
} # end for(time in eccc)
valori
df_temp
# time = 1
for(time in 1:10){
salso_out <- salso(t(drpm1$Si[time,,]),loss="binder")
n_clusters = max(salso_out)
ycurrent = y[,paste0("w",time)]
cat(crayon::cyan("Time",time,"\n"))
for (cl in 1:n_clusters){
cat("Cluster",cl,"- size",length(ycurrent[which(salso_out==cl)]),
"- mean",mean(ycurrent[which(salso_out==cl)]),"\n")
}
# ci sta, sembrano abbastanza diverse
# ora creiamo un dataset che ha (105 righe e) due colonne: i valori di pm10, e il cluster assegnato
clust_vals = salso_out[1:105]
df_temp = as.data.frame(cbind(clust_vals,ycurrent))
# per ora stiamo lavorando sui valori del dataset,
# ma dobbiamo ricordarci che li dobbiamo log-trasformare in realtà
# p = ggplot(df_temp, aes(log(ycurrent), fill = cluster)) +
p = ggplot(df_temp, aes(ycurrent, fill = cluster)) +
# scale_color_discrete(name = "cluster")+
# scale_fill_brewer(type="div",palette=4)+
scale_fill_manual(values = colora(n_clusters,77,0),name="Cluster")+
geom_density(alpha = 0.4)+
ggtitle(paste("Time",time))+
xlim(extrema(ycurrent)+c(-10,10))+
theme_classic()
print(p)
} # end for(time in eccc)
df_temp
# time = 1
for(time in 1:10){
salso_out <- salso(t(drpm1$Si[time,,]),loss="binder")
n_clusters = max(salso_out)
ycurrent = y[,paste0("w",time)]
cat(crayon::cyan("Time",time,"\n"))
for (cl in 1:n_clusters){
cat("Cluster",cl,"- size",length(ycurrent[which(salso_out==cl)]),
"- mean",mean(ycurrent[which(salso_out==cl)]),"\n")
}
# ci sta, sembrano abbastanza diverse
# ora creiamo un dataset che ha (105 righe e) due colonne: i valori di pm10, e il cluster assegnato
clust_vals = salso_out[1:105]
df_temp = as.data.frame(cbind(clust_vals,ycurrent))
# per ora stiamo lavorando sui valori del dataset,
# ma dobbiamo ricordarci che li dobbiamo log-trasformare in realtà
# p = ggplot(df_temp, aes(log(ycurrent), fill = cluster)) +
p = ggplot(df_temp, aes(ycurrent, fill = clust_vals)) +
# scale_color_discrete(name = "cluster")+
# scale_fill_brewer(type="div",palette=4)+
scale_fill_manual(values = colora(n_clusters,77,0),name="Cluster")+
geom_density(alpha = 0.4)+
ggtitle(paste("Time",time))+
xlim(extrema(ycurrent)+c(-10,10))+
theme_classic()
print(p)
} # end for(time in eccc)
n_clusters
# time = 1
for(time in 1:10){
salso_out <- salso(t(drpm1$Si[time,,]),loss="binder")
n_clusters = max(salso_out)
ycurrent = y[,paste0("w",time)]
cat(crayon::cyan("Time",time,"\n"))
for (cl in 1:n_clusters){
cat("Cluster",cl,"- size",length(ycurrent[which(salso_out==cl)]),
"- mean",mean(ycurrent[which(salso_out==cl)]),"\n")
}
# ci sta, sembrano abbastanza diverse
# ora creiamo un dataset che ha (105 righe e) due colonne: i valori di pm10, e il cluster assegnato
clust_vals = salso_out[1:105]
df_temp = as.data.frame(cbind(clust_vals,ycurrent))
# per ora stiamo lavorando sui valori del dataset,
# ma dobbiamo ricordarci che li dobbiamo log-trasformare in realtà
# p = ggplot(df_temp, aes(log(ycurrent), fill = cluster)) +
p = ggplot(df_temp, aes(ycurrent, fill = clust_vals)) +
# scale_color_discrete(name = "cluster")+
# scale_fill_brewer(type="div",palette=4)+
scale_fill_manual(values = colora(n_clusters,77,0),name="Cluster")+
geom_density(alpha = 0.4)+
ggtitle(paste("Time",time))+
xlim(extrema(ycurrent)+c(-10,10))+
theme_classic()
print(p)
} # end for(time in eccc)
# time = 1
for(time in 1:10){
salso_out <- salso(t(drpm1$Si[time,,]),loss="binder")
n_clusters = max(salso_out)
# ci sta, sembrano abbastanza diverse
# ora creiamo un dataset che ha (105 righe e) due colonne: i valori di pm10, e il cluster assegnato
clust_vals = list()
for(cl in 1:n_clusters){
clust_vals[[cl]] <- data.frame(values = y$w1[which(salso_out==cl)])
clust_vals[[cl]]$cluster = as.factor(cl)
}
valori = clust_vals[[1]]
for(cl in 2:n_clusters){
valori = rbind(valori, clust_vals[[cl]])
}
# per ora stiamo lavorando sui valori del dataset,
# ma dobbiamo ricordarci che li dobbiamo log-trasformare in realtà
# p = ggplot(valori, aes(log(values), fill = cluster)) +
p = ggplot(valori, aes(values, fill = cluster)) +
# scale_color_discrete(name = "cluster")+
# scale_fill_brewer(type="div",palette=4)+
scale_fill_manual(values = colora(n_clusters,77,0),name="Cluster")+
geom_density(alpha = 0.4)+
ggtitle(paste("Time",time))+
xlim(extrema(valori$values)+c(-10,10))+
theme_classic()
print(p)
} # end for(time in eccc)
valori
df_temp
# time = 1
for(time in 1:5){
salso_out <- salso(t(drpm1$Si[time,,]),loss="binder")
n_clusters = max(salso_out)
ycurrent = y[,paste0("w",time)]
cat(crayon::cyan("Time",time,"\n"))
for (cl in 1:n_clusters){
cat("Cluster",cl,"- size",length(ycurrent[which(salso_out==cl)]),
"- mean",mean(ycurrent[which(salso_out==cl)]),"\n")
}
# ci sta, sembrano abbastanza diverse
# ora creiamo un dataset che ha (105 righe e) due colonne: i valori di pm10, e il cluster assegnato
clust_vals = salso_out[1:105]
df_temp = as.data.frame(cbind(clust_vals,ycurrent))
# per ora stiamo lavorando sui valori del dataset,
# ma dobbiamo ricordarci che li dobbiamo log-trasformare in realtà
# p = ggplot(df_temp, aes(log(ycurrent), fill = cluster)) +
p = ggplot(df_temp, aes(ycurrent, fill = clust_vals)) +
# scale_color_discrete(name = "cluster")+
# scale_fill_brewer(type="div",palette=4)+
scale_fill_manual(ycurrent = colora(n_clusters,77,0),name="Cluster")+
geom_density(alpha = 0.4)+
ggtitle(paste("Time",time))+
xlim(extrema(ycurrent)+c(-10,10))+
theme_classic()
print(p)
} # end for(time in eccc)
# time = 1
for(time in 1:5){
salso_out <- salso(t(drpm1$Si[time,,]),loss="binder")
n_clusters = max(salso_out)
ycurrent = y[,paste0("w",time)]
cat(crayon::cyan("Time",time,"\n"))
for (cl in 1:n_clusters){
cat("Cluster",cl,"- size",length(ycurrent[which(salso_out==cl)]),
"- mean",mean(ycurrent[which(salso_out==cl)]),"\n")
}
# ci sta, sembrano abbastanza diverse
# ora creiamo un dataset che ha (105 righe e) due colonne: i valori di pm10, e il cluster assegnato
clust_vals = salso_out[1:105]
df_temp = as.data.frame(clust_vals=clust_vals,ycurrent=ycurrent)
# per ora stiamo lavorando sui valori del dataset,
# ma dobbiamo ricordarci che li dobbiamo log-trasformare in realtà
# p = ggplot(df_temp, aes(log(ycurrent), fill = cluster)) +
p = ggplot(df_temp, aes(ycurrent, fill = clust_vals)) +
scale_fill_manual(values = colora(n_clusters,77,0),name="Cluster")+
geom_density(alpha = 0.4)+
ggtitle(paste("Time",time))+
xlim(extrema(ycurrent)+c(-10,10))+
theme_classic()
print(p)
} # end for(time in eccc)
# time = 1
for(time in 1:5){
salso_out <- salso(t(drpm1$Si[time,,]),loss="binder")
n_clusters = max(salso_out)
ycurrent = y[,paste0("w",time)]
cat(crayon::cyan("Time",time,"\n"))
for (cl in 1:n_clusters){
cat("Cluster",cl,"- size",length(ycurrent[which(salso_out==cl)]),
"- mean",mean(ycurrent[which(salso_out==cl)]),"\n")
}
# ci sta, sembrano abbastanza diverse
# ora creiamo un dataset che ha (105 righe e) due colonne: i valori di pm10, e il cluster assegnato
clust_vals = salso_out[1:105]
df_temp = data.frame(clust_vals=clust_vals,ycurrent=ycurrent)
# per ora stiamo lavorando sui valori del dataset,
# ma dobbiamo ricordarci che li dobbiamo log-trasformare in realtà
# p = ggplot(df_temp, aes(log(ycurrent), fill = cluster)) +
p = ggplot(df_temp, aes(ycurrent, fill = clust_vals)) +
scale_fill_manual(values = colora(n_clusters,77,0),name="Cluster")+
geom_density(alpha = 0.4)+
ggtitle(paste("Time",time))+
xlim(extrema(ycurrent)+c(-10,10))+
theme_classic()
print(p)
} # end for(time in eccc)
clust_vals
typeof(df_temp)
typeof(valori)
df_temp
# time = 1
for(time in 1:5){
salso_out <- salso(t(drpm1$Si[time,,]),loss="binder")
n_clusters = max(salso_out)
ycurrent = y[,paste0("w",time)]
cat(crayon::cyan("Time",time,"\n"))
for (cl in 1:n_clusters){
cat("Cluster",cl,"- size",length(ycurrent[which(salso_out==cl)]),
"- mean",mean(ycurrent[which(salso_out==cl)]),"\n")
}
# ci sta, sembrano abbastanza diverse
# ora creiamo un dataset che ha (105 righe e) due colonne: i valori di pm10, e il cluster assegnato
clust_vals = salso_out[1:105]
df_temp = data.frame(clust_vals=clust_vals,ycurrent=ycurrent)
# per ora stiamo lavorando sui valori del dataset,
# ma dobbiamo ricordarci che li dobbiamo log-trasformare in realtà
# p = ggplot(df_temp, aes(log(ycurrent), fill = cluster)) +
p = ggplot(df_temp, aes(ycurrent, fill = factor(clust_vals))) +
scale_fill_manual(values = colora(n_clusters,77,0),name="Cluster")+
geom_density(alpha = 0.4)+
ggtitle(paste("Time",time))+
xlim(extrema(ycurrent)+c(-10,10))+
theme_classic()
print(p)
} # end for(time in eccc)
# time = 1
for(time in 1:5){
salso_out <- salso(t(drpm1$Si[time,,]),loss="binder")
n_clusters = max(salso_out)
ycurrent = y[,paste0("w",time)]
cat(crayon::cyan("Time",time,"\n"))
for (cl in 1:n_clusters){
cat("Cluster",cl,"- size",length(ycurrent[which(salso_out==cl)]),
"- mean",mean(ycurrent[which(salso_out==cl)]),"\n")
}
clust_vals = salso_out[1:105]
df_temp = data.frame(clust_vals=clust_vals,ycurrent=ycurrent)
# per ora stiamo lavorando sui valori del dataset,
# ma dobbiamo ricordarci che li dobbiamo log-trasformare in realtà
p = ggplot(df_temp, aes(log(ycurrent), fill = factor(cluster))) +
#p = ggplot(df_temp, aes(ycurrent, fill = factor(clust_vals))) +
scale_fill_manual(values = colora(n_clusters,77,0),name="Cluster")+
geom_density(alpha = 0.4)+
ggtitle(paste("Time",time))+
#xlim(extrema(ycurrent)+c(-10,10))+
xlim(extrema(log(ycurrent))+c(-10,10))+
theme_classic()
print(p)
} # end for(time in eccc)
# time = 1
for(time in 1:5){
salso_out <- salso(t(drpm1$Si[time,,]),loss="binder")
n_clusters = max(salso_out)
ycurrent = y[,paste0("w",time)]
cat(crayon::cyan("Time",time,"\n"))
for (cl in 1:n_clusters){
cat("Cluster",cl,"- size",length(ycurrent[which(salso_out==cl)]),
"- mean",mean(ycurrent[which(salso_out==cl)]),"\n")
}
clust_vals = salso_out[1:105]
df_temp = data.frame(clust_vals=clust_vals,ycurrent=ycurrent)
# per ora stiamo lavorando sui valori del dataset,
# ma dobbiamo ricordarci che li dobbiamo log-trasformare in realtà
p = ggplot(df_temp, aes(log(ycurrent), fill = factor(clust_vals))) +
#p = ggplot(df_temp, aes(ycurrent, fill = factor(clust_vals))) +
scale_fill_manual(values = colora(n_clusters,77,0),name="Cluster")+
geom_density(alpha = 0.4)+
ggtitle(paste("Time",time))+
#xlim(extrema(ycurrent)+c(-10,10))+
xlim(extrema(log(ycurrent))+c(-10,10))+
theme_classic()
print(p)
} # end for(time in eccc)
# time = 1
for(time in 1:5){
salso_out <- salso(t(drpm1$Si[time,,]),loss="binder")
n_clusters = max(salso_out)
ycurrent = y[,paste0("w",time)]
cat(crayon::cyan("Time",time,"\n"))
for (cl in 1:n_clusters){
cat("Cluster",cl,"- size",length(ycurrent[which(salso_out==cl)]),
"- mean",mean(ycurrent[which(salso_out==cl)]),"\n")
}
clust_vals = salso_out[1:105]
df_temp = data.frame(clust_vals=clust_vals,ycurrent=ycurrent)
# per ora stiamo lavorando sui valori del dataset,
# ma dobbiamo ricordarci che li dobbiamo log-trasformare in realtà
p = ggplot(df_temp, aes(log(ycurrent), fill = factor(clust_vals))) +
#p = ggplot(df_temp, aes(ycurrent, fill = factor(clust_vals))) +
scale_fill_manual(values = colora(n_clusters,77,0),name="Cluster")+
geom_density(alpha = 0.4)+
ggtitle(paste("Time",time))+
#xlim(extrema(ycurrent)+c(-10,10))+
theme_classic()
print(p)
} # end for(time in eccc)
# time = 1
for(time in 1:5){
salso_out <- salso(t(drpm1$Si[time,,]),loss="binder")
n_clusters = max(salso_out)
ycurrent = y[,paste0("w",time)]
ycurrent = log(ycurrent)
cat(crayon::cyan("Time",time,"\n"))
for (cl in 1:n_clusters){
cat("Cluster",cl,"- size",length(ycurrent[which(salso_out==cl)]),
"- mean",mean(ycurrent[which(salso_out==cl)]),"\n")
}
clust_vals = salso_out[1:105]
df_temp = data.frame(clust_vals=clust_vals,ycurrent=ycurrent)
# per ora stiamo lavorando sui valori del dataset,
# ma dobbiamo ricordarci che li dobbiamo log-trasformare in realtà
p = ggplot(df_temp, aes(ycurrent, fill = factor(clust_vals))) +
scale_fill_manual(values = colora(n_clusters,77,0),name="Cluster")+
geom_density(alpha = 0.4)+
ggtitle(paste("Time",time))+
theme_classic()
print(p)
} # end for(time in eccc)
# time = 1
for(time in 1:10){
salso_out <- salso(t(drpm1$Si[time,,]),loss="binder")
n_clusters = max(salso_out)
ycurrent = y[,paste0("w",time)]
ycurrent = log(ycurrent)
cat(crayon::cyan("Time",time,"\n"))
for (cl in 1:n_clusters){
cat("Cluster",cl,"- size",length(ycurrent[which(salso_out==cl)]),
"- mean",mean(ycurrent[which(salso_out==cl)]),"\n")
}
clust_vals = salso_out[1:105]
df_temp = data.frame(clust_vals=clust_vals,ycurrent=ycurrent)
# per ora stiamo lavorando sui valori del dataset,
# ma dobbiamo ricordarci che li dobbiamo log-trasformare in realtà
p = ggplot(df_temp, aes(ycurrent, fill = factor(clust_vals))) +
scale_fill_manual(values = colora(n_clusters,77,0),name="Cluster")+
geom_density(alpha = 0.4)+
ggtitle(paste("Time",time))+
theme_classic()
print(p)
} # end for(time in eccc)
plot(summary(salso_out)$dendrogram) # boh
cols = colora(105,56,show=F)
trendYearStation_week <- function(file_name){
data_from_to = df_weekly
len_time = 54
chosen_variable = (data_from_to[,chosen_variable_name])
# Crea il grafico ggplot
station_trend <- ggplot(data_from_to,aes(x = week,
y = AQ_pm10,
group=IDStations,
color = as.factor(IDStations))) +
geom_line(show.legend = FALSE) +
labs(x = "Stations", y = chosen_variable_name, title = "Year: 2018 all stations") +
ylim(range(na.omit(chosen_variable))) +
scale_color_manual(values = cols) +
theme_bw()+
theme(panel.grid = element_blank()) +
guides(color = guide_legend())+
labs(x="week")
len_time = (len_time%/%5)
return(trend_animator(file_name,station_trend, data_from_to$week,len_time))
}
trendYearStation_week("None")
