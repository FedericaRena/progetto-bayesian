AGC_Dataset = rbind(parte1, parte2)
source("include.R")
source("plot functions/plot_functions.R")
rm(part1)
rm(parte1)
rm(parte2)
stationPlot <- stationPlot()
head(data_agc_lomb)
initial_date = "2016-01-01"
final_date = "2016-01-01"
every = "month"
# if you change the file_name from None it will create a mp4 video
file_name = "None"
chosen_variable_name = "WE_wind_speed_10m_max"
color_low =  "yellow"
color_high = "blue"
map = gridMap(initial_date,final_date,every,file_name,color_low,color_high,chosen_variable_name)
chosen_variable = data_from_to[,chosen_variable_name]
filter_date_list = filter_date(data_agc_lomb,initial_date,final_date,every)
data_from_to = filter_date_list[[1]]
len_time = filter_date_list[[2]]
chosen_variable = data_from_to[,chosen_variable_name]
chosen_variable
grid <- ggplot() +
geom_hline( yintercept = data_from_to$Latitude, color = "black", size = 0.1) +  # Linee orizzontali
geom_vline(xintercept = data_from_to$Longitude, color = "black", size = 0.1)  # Linee verticali
grid <- ggplot() +
geom_hline( yintercept = data_from_to$Latitude, color = "black", size = 0.1) +  # Linee orizzontali
geom_vline(xintercept = data_from_to$Longitude, color = "black", size = 0.1)  # Linee verticali
gradient_map <-
grid+
geom_tile(data = data_from_to, aes(x = Longitude, y = Latitude, fill = chosen_variable),
colour = "grey50",width = 1, height = 1,alpha = 1) +
scale_fill_gradient(low = color_low, high = color_high,na.value = "gray")
grid <- ggplot() +
geom_hline( yintercept = data_from_to$Latitude, color = "black", size = 0.1) +  # Linee orizzontali
geom_vline(xintercept = data_from_to$Longitude, color = "black", size = 0.1)  # Linee verticali
gradient_map <-
grid+
geom_tile(data = data_from_to, aes(x = Longitude, y = Latitude, fill = chosen_variable),
colour = "grey50",width = 1, height = 1,alpha = 1) +
scale_fill_gradient(low = color_low, high = color_high,na.value = "gray")
gradient_map <- gradient_map +facet_wrap(~Time)
print(gradient_map)
grid <- ggplot() +
geom_hline( yintercept = data_from_to$Latitude, color = "black", size = 0.1) +  # Linee orizzontali
geom_vline(xintercept = data_from_to$Longitude, color = "black", size = 0.1)  # Linee verticali
gradient_map <-
grid+
geom_tile(data = data_from_to, aes(x = Longitude, y = Latitude, fill = chosen_variable),
colour = "grey50",width = 1, height = 1,alpha = 1) +
scale_fill_gradient(low = color_low, high = color_high,na.value = "gray")
gradient_map <- gradient_map +facet_wrap(~Time)
print(gradient_map)
gradient_map
gradient_map <- gradient_map +facet_wrap(Time)
gradient_map <- gradient_map +facet_wrap(~Time)
typeof(gradient_map)
print(gradient_map[[1]])
print(gradient_map[[2]])
+facet_wrap(~Time)
facet_wrap(~Time)
~Time
print(gradient_map)
~Timecolnam
colnames(df_agc_lombardia)
colnames(data_agc_lomb)
initial_date = "2016-01-01"
final_date = "2016-01-01"
every = "month"
# if you change the file_name from None it will create a mp4 video
file_name = "None"
# chosen_variable_name = "WE_wind_speed_10m_max"
chosen_variable_name = "Altitude"
color_low =  "yellow"
color_high = "blue"
map = gridMap(initial_date,final_date,every,file_name,color_low,color_high,chosen_variable_name)
sum(is.na(data_agc_lomb$Altitude))
sum(is.na(data_agc_lomb$WE_wind_speed_10m_max))
is.na(data_agc_lomb$Altitude)
as.numeric(is.na(data_agc_lomb$Altitude))
sum(as.numeric(is.na(data_agc_lomb$Altitude)))
as.numeric(is.na(data_agc_lomb$WE_wind_speed_10m_max))
typeof(data_agc_lomb$WE_wind_speed_10m_max)
head(data_agc_lomb$WE_wind_speed_10m_max)
data_agc_lomb$WE_wind_speed_10m_max = as.numeric(data_agc_lomb$WE_wind_speed_10m_max)
head(data_agc_lomb$WE_wind_speed_10m_max)
initial_date = "2016-01-01"
final_date = "2016-01-01"
every = "month"
# if you change the file_name from None it will create a mp4 video
file_name = "None"
data_agc_lomb$WE_wind_speed_10m_max = as.numeric(data_agc_lomb$WE_wind_speed_10m_max)
chosen_variable_name = "WE_wind_speed_10m_max"
# chosen_variable_name = "Altitude"
color_low =  "yellow"
color_high = "blue"
map = gridMap(initial_date,final_date,every,file_name,color_low,color_high,chosen_variable_name)
source("include.R")
hist(log(Y))
Y = df_agri$AQ_pm10
par(mfrow=c(1,2))
hist(Y)
hist(log(Y))
ggplot(data = data.frame(Y = Y), aes(x = Y)) +
geom_histogram(binwidth = 5, fill = "skyblue", color = "black", alpha = 0.7) +
labs(title = "Istogramma di AQ_pm10", x = "AQ_pm10", y = "Frequenza") +
theme_minimal()
# Istogramma del logaritmo della variabile
ggplot(data = data.frame(log_Y = log(Y)), aes(x = log_Y)) +
geom_histogram(binwidth = 0.2, fill = "lightgreen", color = "black", alpha = 0.7) +
labs(title = "Istogramma del Logaritmo di AQ_pm10", x = "Log(AQ_pm10)", y = "Frequenza") +
theme_minimal()
ln = log
ggplot(data = data.frame(Y = Y), aes(x = Y)) +
geom_histogram(binwidth = 5, fill = "skyblue", color = "black", alpha = 0.7) +
labs(title = "Istogramma di AQ_pm10", x = "AQ_pm10", y = "Frequenza") +
theme_minimal()
# Istogramma del logaritmo della variabile
ggplot(data = data.frame(log_Y = log(Y)), aes(x = log_Y)) +
geom_histogram(binwidth = 0.2, fill = "lightgreen", color = "black", alpha = 0.7) +
labs(title = "Istogramma del Logaritmo di AQ_pm10", x = "Log(AQ_pm10)", y = "Frequenza") +
theme_minimal()
cols=colora(2,345)
hist(log(Y),col=cols[2])
Y = df_agri$AQ_pm10
par(mfrow=c(1,2))
cols=colora(2,345)
hist(Y,col=cols[1])
hist(log(Y),col=cols[2])
cols=colora(2,345)
Y = df_agri$AQ_pm10
par(mfrow=c(1,2))
hist(Y,col=cols[1])
hist(log(Y),col=cols[2])
par(mfrow=c(1,2),mar=c(1,1,1,1))
cols=colora(2,345)
Y = df_agri$AQ_pm10
par(mfrow=c(1,2),mar=c(1,1,1,1))
hist(Y,col=cols[1])
hist(log(Y),col=cols[2])
cols=colora(2,345)
Y = df_agri$AQ_pm10
par(mfrow=c(1,2),mar=c(2,2,2,2))
hist(Y,col=cols[1])
hist(log(Y),col=cols[2])
cols=colora(2,345)
Y = df_agri$AQ_pm10
par(mfrow=c(1,2),mar=c(2,2,2,2))
hist(Y,col=cols[1],probability = T)
hist(log(Y),col=cols[2],probability = T)
ggplot(df, aes(x = Y, fill = "Original")) +
geom_histogram(binwidth = 5, alpha = 0.7, position = "identity") +
geom_histogram(data = df, aes(x = log_Y, fill = "Logarithm"), binwidth = 0.2, alpha = 0.7, position = "identity") +
labs(title = "Confronto Istogramma di AQ_pm10 e del suo Logaritmo", x = "Valore", y = "Frequenza", fill = "Tipo") +
scale_fill_manual(values = c("Original" = "skyblue", "Logarithm" = "lightgreen")) +
theme_minimal()
ggplot(df_agri, aes(x = AQ_pm10, fill = "Original")) +
geom_histogram(binwidth = 5, alpha = 0.7, position = "identity") +
geom_histogram(data = df, aes(x = log_Y, fill = "Logarithm"), binwidth = 0.2, alpha = 0.7, position = "identity") +
labs(title = "Confronto Istogramma di AQ_pm10 e del suo Logaritmo", x = "Valore", y = "Frequenza", fill = "Tipo") +
scale_fill_manual(values = c("Original" = "skyblue", "Logarithm" = "lightgreen")) +
theme_minimal()
ggplot(df_agri, aes(x = Y, fill = "Original")) +
geom_histogram(binwidth = 5, alpha = 0.7, position = "identity") +
geom_histogram(data = df_agri, aes(x = log(Y), fill = "Logarithm"), binwidth = 0.2, alpha = 0.7, position = "identity") +
labs(title = "Confronto Istogramma di AQ_pm10 e del suo Logaritmo", x = "Valore", y = "Frequenza", fill = "Tipo") +
scale_fill_manual(values = c("Original" = "skyblue", "Logarithm" = "lightgreen")) +
theme_minimal()
cols=colora(2,34)
Y = df_agri$AQ_pm10
par(mfrow=c(1,2),mar=c(2,2,2,2))
hist(Y,col=cols[1],probability = T)
hist(log(Y),col=cols[2],probability = T)
cols=colora(2,3)
Y = df_agri$AQ_pm10
par(mfrow=c(1,2),mar=c(2,2,2,2))
hist(Y,col=cols[1],probability = T)
hist(log(Y),col=cols[2],probability = T)
cols=colora(2,rand())
cols=colora(2,24)
Y = df_agri$AQ_pm10
par(mfrow=c(1,2),mar=c(2,2,2,2))
hist(Y,col=cols[1],probability = T)
hist(log(Y),col=cols[2],probability = T)
cols=colora(2,244)
Y = df_agri$AQ_pm10
par(mfrow=c(1,2),mar=c(2,2,2,2))
hist(Y,col=cols[1],probability = T)
hist(log(Y),col=cols[2],probability = T)
cols=colora(2,24)
cols=colora(2,25)
cols=colora(2,26)
for (i in 10:20){
cols=colora(2,i)
}
?image
for (i in 10:20){
cols=colora(2,i)
title(main="1")
}
for (i in 10:20){
cols=colora(2,i)
title(main=i)
}
cols = colora(2,15)
Y = df_agri$AQ_pm10
par(mfrow=c(1,2),mar=c(2,2,2,2))
hist(Y,col=cols[1],probability = T)
hist(log(Y),col=cols[2],probability = T)
cols = colora(2,15)
pm10 = df_agri$AQ_pm10
par(mfrow=c(1,2),mar=c(2,2,2,2))
hist(Y,col=cols[1],probability = T)
hist(log(Y),col=cols[2],probability = T)
cols = colora(2,15)
pm10 = df_agri$AQ_pm10
par(mfrow=c(1,2),mar=c(2,2,2,2))
hist(pm10,col=cols[1],probability = T)
hist(log(pm10),col=cols[2],probability = T)
cols = colora(2,15)
pm10 = df_agri$AQ_pm10
par(mfrow=c(1,2),mar=c(2,2,2,2))
hist(pm10,col=cols[1],probability = T)
hist(log(pm10),col=cols[2],probability = T,xlim=c(-1,6))
########################
# function to get colors for plotting
########################
fun_colori = function(len=2, seed=33, show=1){
hcols_ = hcl.pals()
col.ramp_ = hcl.colors(len,palette=hcols_[seed%%115+1])
if(show==1){
dati_ <- matrix(1:100, ncol = 1)
image(dati_, col = col.ramp_, axes = FALSE)
title(main=seed)
}
return(col.ramp_)
}
cols = colora(2,15)
cols = colora(2,15)
pm10 = df_agri$AQ_pm10
par(mfrow=c(1,2),mar=c(2,2,2,2))
hist(pm10,col=cols[1],probability = T)
hist(log(pm10),col=cols[2],probability = T,xlim=c(-1,6))
str(2)
as.character(244)
########################
# function to get colors for plotting
########################
fun_colori = function(len=2, seed=33, show=1){
hcols_ = hcl.pals()
col.ramp_ = hcl.colors(len,palette=hcols_[seed%%115+1])
if(show==1){
dati_ <- matrix(1:100, ncol = 1)
image(dati_, col = col.ramp_, axes = FALSE)
title(main=as.character(seed))
}
return(col.ramp_)
}
########################
# function to get colors for plotting
########################
fun_colori = function(len=2, seed=33, show=1){
hcols_ = hcl.pals()
col.ramp_ = hcl.colors(len,palette=hcols_[seed%%115+1])
if(show==1){
dati_ <- matrix(1:100, ncol = 1)
image(dati_, col = col.ramp_, axes = FALSE)
title(main=as.character(seed))
}
return(col.ramp_)
}
colori_fun = colorami = colora = fun_colori # aliases
cols = colora(2,15)
########################
# function to get colors for plotting
########################
fun_colori = function(len=2, seed=33, show=1){
hcols_ = hcl.pals()
col.ramp_ = hcl.colors(len,palette=hcols_[seed%%115+1])
if(show==1){
dati_ <- matrix(1:100, ncol = 1)
image(dati_, col = col.ramp_, axes = FALSE)
title(main=seed)
}
return(col.ramp_)
}
colori_fun = colorami = colora = fun_colori # aliases
cols = colora(2,15)
cols = colora(2,15)
pm10 = df_agri$AQ_pm10
par(mfrow=c(1,2),mar=c(2,2,2,2))
hist(pm10,col=cols[1],probability = T)
hist(log(pm10),col=cols[2],probability = T,xlim=c(-1,6))
cols = colora(6,15)
cols = colora(2,15)
pm10 = df_agri$AQ_pm10
par(mfrow=c(1,2),mar=c(2,2,2,2))
hist(pm10,col=cols[1],probability = T)
hist(log(pm10),col=cols[2],probability = T,xlim=c(-1,6))
cols = colora(2,15)
pm10 = df_agri$AQ_pm10
par(mfrow=c(1,2),mar=c(2,2,2,2))
hist(pm10,col=cols[1],probability = T)
hist(log(pm10),col=cols[2],probability = T,xlim=c(-1,6))
qqplot(log(pm10))
qqline(log(pm10))
qqline(log(pm10))
qqnorm(log(pm10))
shapiro.test(log(pm10))
shapiro.test(log(pm10)[1:5000])
shapiro.test(na.omit(log(pm10))[1:5000])
shapiro.test(na.omit(log(pm10))[1:5000])
na.omit(log(pm10))
shapiro.test(na.omit(log(pm10))[1:1000])
cols = colora(2,15)
pm10 = df_agri$AQ_pm10
par(mfrow=c(1,2),mar=c(2,2,2,2))
hist(pm10,col=cols[1],probability = T)
hist(log(pm10),col=cols[2],probability = T,xlim=c(-1,6))
source("include.R")
cat("df_agri shape",size(df_agri),"\n")
cat("df_2018 shape",size(df_2018),"\n")
# add column day (names) on df_2018
days = c("lunedì","martedì","mercoledì","giovedì","venerdì","sabato","domenica")
day_names = weekdays(df_2018$Time)
df_2018$day = as.factor(day_names)
head(df_2018)
# cols = colora(7,runif(1,0,133),1)
cols = colora(7,24,0)
st = sample(unique(df_2018$IDStations),1)
for (d in days){
df_st = df_2018[df_2018$IDStations==st,] # filter a single station
df_st_day = df_st[df_st$day == d,] # filter a certain day
col_idx = which(days==d)
if(col_idx==1)
plot(df_st_day$AQ_pm10,xlab="year weeks",ylab="PM10 values",
main=paste("station",st),col=cols[col_idx],type="l")
else
points(df_st_day$AQ_pm10,xlab="year weeks",ylab="PM10 values",
main=paste("station",st),col=cols[col_idx],type="l")
}
legend("top",c("lunedì","martedì","mercoledì","giovedì","venerdì","sabato","domenica"),
fill=cols,cex=0.6,bty = "n")
# cols = colora(7,runif(1,0,133),1)
cols = colora(7,24,0)
st = sample(unique(df_2018$IDStations),1)
for (d in days){
df_st = df_2018[df_2018$IDStations==st,] # filter a single station
df_st_day = df_st[df_st$day == d,] # filter a certain day
col_idx = which(days==d)
if(col_idx==1)
plot(df_st_day$AQ_pm10,xlab="year weeks",ylab="PM10 values",
main=paste("station",st),col=cols[col_idx],type="l")
else
points(df_st_day$AQ_pm10,xlab="year weeks",ylab="PM10 values",
main=paste("station",st),col=cols[col_idx],type="l")
abline(h=mean(na.omit(df_st_day$AQ_pm10)),col=cols[col_idx])
}
legend("top",c("lunedì","martedì","mercoledì","giovedì","venerdì","sabato","domenica"),
fill=cols,cex=0.6,bty = "n")
# to not have huge intervals
end_day = 400
while(end_day > 365){
start_day = round(runif(1, min=0, max=365))
end_day = start_day + round(runif(1,min=5,max=30))
}
title=paste(end_day-start_day,"days:",
"from",format(as.Date("2018-01-01")+start_day),
"to",format(as.Date("2018-01-01")+end_day))
# st = "635"
st = sample(unique(df_2018$IDStations),1)
df_st = df_2018[df_2018$IDStations==st,] # filter a single station
df_st_int = df_st[start_day:end_day,]
plot(df_st_int$Time,df_st_int$AQ_pm10,main=title,type="b")
interpola_NA <- function(obs) {
non_na_indices <- which(!is.na(obs))
na_indices <- which(is.na(obs))
# print(non_na_indices)
# print(na_indices)
# loop on Na indices
for (na_index in na_indices) {
# Trova l'indice più vicino a sinistra e quello più vicino a destra
left_index <- suppressWarnings(max(non_na_indices[non_na_indices < na_index]))
right_index <- suppressWarnings(min(non_na_indices[non_na_indices > na_index]))
# cat("NA idx",na_index," - LR values = ",obs[left_index],",",obs[right_index],"\n")
# Esegui l'interpolazione se ci sono valori a sinistra e a destra
if (!is.na(left_index) && !is.na(right_index)) {
left_value <- obs[left_index]
right_value <- obs[right_index]
# Calcola il valore interpolato
interpolated_value <- left_value +
((right_value - left_value) / (right_index - left_index)) * (na_index - left_index)
# Sostituisci il valore NA con quello interpolato
obs[na_index] <- interpolated_value
}
if(is.na(obs[na_index])){
obs[na_index] = na.omit(c(obs[left_index],obs[right_index]))
}
# cat(obs[na_index],"\n")
}
return(obs)
}
# example
test <- c(NA,NA,10, 15, NA, 20, 24, 20, 18, NA, NA, 10, 9, 9, NA)
print(test)
result <- interpola_NA(test)
print(round(result))
plot(df_st_int$Time,df_st_int$AQ_pm10,main=title,type="b",lwd=2)
obs = df_st_int$AQ_pm10
obs_wo_na = interpola_NA(obs)
df_st_int_wo_na = df_st_int
df_st_int_wo_na$AQ_pm10 = obs_wo_na
lines(df_st_int_wo_na$Time,df_st_int_wo_na$AQ_pm10,type="b",lty=2,col="blue")
historic_fill_pm10col_na = function(df_st){
day_names = as.vector(df_st$day)
obs = df_st$AQ_pm10
day_mean = hash()
for (d in days){
day_mean[[d]] = mean(na.omit(obs[day_names==d]))
}
for (i in 1:length(obs)){
if(is.na(obs[i])){
obs[i] = day_mean[[day_names[i]]]
}
}
return(obs)
}
we_have_na = 0
while(we_have_na == 0){
end_day = 400
while(end_day > 365){
start_day = round(runif(1, min=0, max=365))
end_day = start_day + round(runif(1,min=10,max=40))
}
st = sample(unique(df_2018$IDStations),1)
title=paste("station",st,"-",
end_day-start_day,"days:",
"from",format(as.Date("2018-01-01")+start_day),
"to",format(as.Date("2018-01-01")+end_day))
df_st = df_2018[df_2018$IDStations==st,] # filter a single station
df_st_int = df_st[start_day:end_day,]
we_have_na = any(is.na(df_st_int$AQ_pm10))
}
plt_type = "l"
plot(df_st_int$Time,df_st_int$AQ_pm10,main=title,type=plt_type,lwd=2)
############## Method 2 intempolation
obs = df_st_int$AQ_pm10
obs_wo_na = interpola_NA(obs)
df_st_int_wo_na = df_st_int
df_st_int_wo_na$AQ_pm10 = obs_wo_na
lines(df_st_int_wo_na$Time,df_st_int_wo_na$AQ_pm10,type=plt_type,lty=2,col="blue",lwd=0.6)
############## Method 1 historical fill
obs_wo_na = historic_fill_pm10col_na(df_st)
df_st_int_wo_na = df_st_int
df_st_int_wo_na$AQ_pm10 = obs_wo_na[start_day:end_day]
lines(df_st_int_wo_na$Time,df_st_int_wo_na$AQ_pm10,type=plt_type,lty=2,col="red",lwd=0.6)
legend("topright",c("intempolation","historical"),fill=c("blue","red"),bty="n")
start_day = 100
end_day = 300
cols = colora(3,56,0)
we_have_na = 0
while(we_have_na == 0){
st = sample(unique(df_2018$IDStations),1)
df_st = df_2018[df_2018$IDStations==st,] # filter a single station
df_st_int = df_st[start_day:end_day,]
we_have_na = any(is.na(df_st_int$AQ_pm10))
}
title = paste("station",st,"- #NA =",sum(as.numeric(is.na(df_st_int$AQ_pm10))))
plt_type = "l"
plot(df_st_int$Time,df_st_int$AQ_pm10,main=title,lwd=1,type=plt_type,col=cols[1])
############## Method 2 intempolation
obs = df_st_int$AQ_pm10
obs_wo_na = interpola_NA(obs)
df_st_int_wo_na = df_st_int
df_st_int_wo_na$AQ_pm10 = obs_wo_na
lines(df_st_int_wo_na$Time,df_st_int_wo_na$AQ_pm10,type=plt_type,col=cols[2])
############## Method 1 historical fill
obs_wo_na = historic_fill_pm10col_na(df_st)
df_st_int_wo_na = df_st_int
df_st_int_wo_na$AQ_pm10 = obs_wo_na[start_day:end_day]
lines(df_st_int_wo_na$Time,df_st_int_wo_na$AQ_pm10,type=plt_type,col=cols[3])
# to superimpose the first color
lines(df_st_int$Time,df_st_int$AQ_pm10,main=title,lwd=1,type=plt_type,col=cols[1])
legend("topright",c("original","intempolation","historical"),fill=cols,bty="n")
# cols = colora(7,runif(1,0,133),1)
cols = colora(3,56,0)
enough_na = 0
while(enough_na==0){
st = sample(unique(df_2018$IDStations),1)
df_st = df_2018[df_2018$IDStations==st,] # filter a single station
enough_na = sum(as.numeric(is.na(df_st$AQ_pm10)))>20
}
for (d in days){
# d = "lunedì"
df_st_day = df_st[df_st$day == d,] # filter a certain day
plot(df_st_day$AQ_pm10,xlab="year weeks",ylab="PM10 values",
main=paste("station =",st,"- day =",d,"- #NA =",
sum(as.numeric(is.na(df_st_day$AQ_pm10)))),
col=cols[1],type="l")
lines(interpola_NA(df_st_day$AQ_pm10),col=cols[2],type="l")
lines(historic_fill_pm10col_na(df_st_day),col=cols[3],type="l")
# to superimpose the first color
lines(df_st_day$AQ_pm10)
legend("top",c("original","intempolation","historical"),fill=cols,bty="n")
}
install.packages("ppmSuite")
library(ppmSuite)
install.packages("drpm")
library(drpm)
devtools::install_github("https://github.com/gpage2990/drpm.git")
library(drpm)
